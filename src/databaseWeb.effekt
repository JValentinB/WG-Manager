module databaseWeb

import ref
import array
import io/filesystem
import option

// import src/utils/dom


// --------------------------------------------------------------------------------
// There are three main types of data for this webtool: 
// - a flatmate
//   - name
// - a task
//   - name
//   - description
//   - schedule (how often it should be done)
//   - last time it was done
//   - assigned flatmates
//   - flatmates next in turn
// - a common consumable
//   - name
//   - description
//   - urgency (0 for not urgent, 1 for should be bought/done soon, 2 for needs to be bought immediately)
//   - assigned flatmates
//     - how many times each flatmate has bought it
// --------------------------------------------------------------------------------

// Sqlite FFI definitions
extern type Database

extern async def fetchDatabase(endpoint: String): Database =
  jsWeb """$effekt.capture(callback => {
    const loadSqlJs = () => {
      fetch(window.location.origin + ${endpoint})
        .then(response => {
          if (!response.ok) {
            throw new Error(response.statusText);
          }
          return response.arrayBuffer();
        })
        .then(buffer => {
          console.log("Fetched the database file successfully");
          const config = {
            locateFile: function(file) {
              return 'https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.12.0/' + file;
            }
          };
          initSqlJs(config).then(SQL => {
            console.log("SQL.js initialized");
            const db = new SQL.Database(new Uint8Array(buffer));
            console.log("Database initialized");
            callback(db); // Pass the db instance to the Effekt world
          }).catch(error => {
            console.error("Failed to initialize SQL.js:", error);
          });
        })
        .catch(error => {
          console.error("Error during fetch or processing:", error);
        });
    };
    loadSqlJs();
  })"""

extern async def createTable(db: Database, query: String): Unit =
  jsWeb """$effekt.capture((callback) => {
    ${db}.run(${query});
    callback();
  })"""

extern async def insertData(db: Database, query: String, params: Array[String]): Unit =
  jsWeb """$effekt.capture(async (callback) => {
    const stmt = ${db}.prepare(${query});
    stmt.run(${params});
    callback();
  })"""

extern async def readData(db: Database, query: String): Array[Array[String]] =
  jsWeb """$effekt.capture((callback) => {
    const stmt = ${db}.prepare(${query});
    const rows = [];
    while (stmt.step()) {
      const row = stmt.getAsObject();
      const rowArray = Object.values(row).map(value => value?.toString() || "null");
      rows.push(rowArray);
    }
    callback(rows);
  })"""

extern async def readDataWithParams(db: Database, query: String, param: String): Array[String] =
  jsWeb """$effekt.capture((callback) => {
    const stmt = ${db}.prepare(${query});
    stmt.bind(${param});
    callback(stmt.getAsObject());
  })"""




def createFlatmateTable(db: Database): Unit = {
  val query = """
    CREATE TABLE IF NOT EXISTS flatmates (
      id INTEGER PRIMARY KEY,
      name TEXT
    )
  """
  db.createTable(query)
}

def createTaskTable(db: Database): Unit = {
  val query = """
    CREATE TABLE IF NOT EXISTS tasks (
      id INTEGER PRIMARY KEY,
      name TEXT,
      description TEXT,
      schedule TEXT,
      last_done TEXT,
      assigned_flatmates TEXT,
      flatmate_next_in_turn TEXT
    )
  """
  db.createTable(query)
}

def createConsumableTable(db: Database): Unit = {
  val query = """
    CREATE TABLE IF NOT EXISTS consumables (
      id INTEGER PRIMARY KEY,
      name TEXT,
      description TEXT,
      urgency INTEGER,
      assigned_flatmates TEXT
    )
  """
  db.createTable(query)
}


def insertFlatmate(db: Database, name: String): Unit = {
  val query = "INSERT INTO flatmates (name) VALUES (?)"
  db.insertData(query, [name].fromList())
}
def insertTask(db: Database, list: List[String]): Unit = {
  // List has to contain: name, description, schedule, last_done, assigned_flatmates, flatmates_next_in_turn
  val query = """
    INSERT INTO tasks (name, description, schedule, last_done, assigned_flatmates, flatmates_next_in_turn) VALUES (?, ?, ?, ?, ?, ?)
  """
  db.insertData(query, list.fromList())
}
def insertConsumable(db: Database, list: List[String]): Unit = {
  // List has to contain: name, description, urgency, assigned_flatmates
  val query = """
    INSERT INTO consumables (name, description, urgency, assigned_flatmates) VALUES (?, ?, ?, ?)
  """
  db.insertData(query, list.fromList())
}

// Functions to retrieve whole tables
def getFlatmates(db: Database): Array[Array[String]] = {
  val query = "SELECT name FROM flatmates"
  db.readData(query)
}
def getTasks(db: Database): Array[Array[String]] = {
  val query = "SELECT * FROM tasks"
  db.readData(query)
}
def getConsumables(db: Database): Array[Array[String]] = {
  val query = "SELECT * FROM consumables"
  db.readData(query)
}

// Functions to retrieve single entries
def getFlatmateInfo(db: Database, name: String): Array[String] = {
  val query = "SELECT * FROM flatmates WHERE name = ?"
  db.readDataWithParams(query, name)
}
def getTaskInfo(db: Database, name: String): Array[String] = {
  val query = "SELECT * FROM tasks WHERE name = ?"
  db.readDataWithParams(query, name)
}
def getConsumableInfo(db: Database, name: String): Array[String] = {
  val query = "SELECT * FROM consumables WHERE name = ?"
  db.readDataWithParams(query, name)
}