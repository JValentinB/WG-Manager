// Based on Exercise5
module client

import src/utils/dom
import src/utils/counter
import src/styles
import src/databaseWeb

import ref
import string

type Event { 
  Change(n: Int);
  Reset();
  BorderOn(node: Node);
  BorderOff(node: Node);
  AddFlatmate(input: Node);
  Cancel();
  OpenSettings();
  CloseSettings();
}

def run[St](root: Node, init: St, app: Application[St, Event]) = app match {
  case Application(update, view) =>
    // rootElement.attributes.foreach { attr => 
    //   rootElement.node.setAttribute(attr.name, attr.value)
    //   ()
    // }
    
    // val root = rootElement.node
    val inbox = ref[List[Event]](Nil())
    val state = ref(init)

    def send(ev: Event): Unit = inbox.set(Cons(ev, inbox.get))

    def render(html: HtmlElement[Event]): Node = {
      var node = html.node
      node = node.innerHTML(html.text)
      html.children.foreach { child => 
        node.appendChild(child.render)
        ()
      }
      html.attributes.foreach { attr => 
        node.setAttribute(attr.name, attr.value)
        ()
      }
      html.handlers.foreach { handler =>
        handler match {
          case OnClick(ev) => {
            node.onClick(box { send(ev) })
          }
          case OnChange(ev) => ()
          case OnMouseEnter(ev) => {
            node.onMouseEnter(box { send(ev) })
          }
          case OnMouseLeave(ev) => node.onMouseLeave(box { send(ev) })
        }
        ()
      }
      node
    }

    // renders the app with the current state
    def render(): Unit = {
      val rendered = statefully(state) { view() }.render
      root.clear;
      root.appendChild(rendered);
      ()
    }

    def loop(deadline: IdleDeadline): Unit = {
      val messages = inbox.get.reverse
      inbox.set(Nil())

      if (messages.nonEmpty) {
        messages.foreach { ev =>
          ev match {
            case Change(n) => {
              statefully(state) { update(ev) }
              render()
            }
            case Reset() => {
              statefully(state) { update(ev) }
              render()
            }
            case _ => statefully(state) { update(ev) }
          }
        }
      }
      requestIdleCallback(box loop)
    }

    render()
    requestIdleCallback(box loop)
}


interface Model {
  def change(n: Int): Unit
  def reset(): Unit
  def count(): Int
  def borderOn(node: Node): Unit
  def borderOff(node: Node): Unit
}
interface FlatmateModel {
  def addFlatmate(input: Node): Unit
  def cancel(): Unit
}
interface SettingsModel {
  def open(): Unit
  def close(): Unit
}


def dispatch(msg: Event) = {
  msg match {
    case Change(n) => do change(n)
    case Reset() => do reset()
    case BorderOn(node) => do borderOn(node)
    case BorderOff(node) => do borderOff(node)
    case _ => ()
  }
}
def dispatchSettings(msg: Event) = {
  msg match {
    case OpenSettings() => do open()
    case CloseSettings() => do close()
    case _ => ()
  }
}
def dispatchFlatmate(msg: Event) = {
  msg match {
    case AddFlatmate(input) => do addFlatmate(input) 
    case Cancel() => do cancel()
    case _ => ()
  }
}


def counterController[R] { prog: => R / Model }: R / State[Int] =
  try { prog() }
  with Model {
    def count() = resume(do getState())
    def change(n: Int) = {
      val response = post("/change/" ++ show(n))
      do setState(getCount(response))
      resume(())
    }
    def reset() = {
      val response = post("/reset")
      do setState(getCount(response))
      resume(())
    }
    def borderOn(node: Node) = {
      consoleLog("borderOn")
      node.setStyle("outline", "1px solid #287aa6")
      resume(())
    }
    def borderOff(node: Node) = {
      node.setStyle("outline", "none")
      resume(())
    }
}
def settingsController[R] { prog: => R / SettingsModel }: R / State[Int] =
  try { prog() }
  with SettingsModel {
    def open() = {
      val appDiv = getElementById("app")

      appDiv match {
        case Some(appNode) => run(appNode, 0, Application(
          box { (ev) =>
            with flatmateController
            ev.dispatchFlatmate()
          },
          box {
            with flatmateController
            viewAddFlatmate()
          }
        ))
        case None() => ()
      }

      resume(())
    }
    def close() = {
      resume(())
    }
}
def flatmateController[R] { prog: => R / FlatmateModel }: R / State[Int] =
  try { prog() }
  with FlatmateModel {
    def addFlatmate(input: Node) = {
      val name = input.getValue()
      val response = post("/addFlatmate/" ++ name)
      resume(())
    }
    def cancel() = {
      resume(())
    }
}



def viewAddFlatmate(): HtmlElement[Event] / FlatmateModel = {
  var addButton = button("Add flatmate", [], 
    [Attribute("style", styles("button")), Attribute("id", "addButton")], [])
  val cancelButton = button("Cancel", [], 
    [Attribute("style", styles("button")), Attribute("id", "cancelButton")], [])

  val nameInput = input("", [], [Attribute("id", "nameInput"), Attribute("style", styles("nameInput")), Attribute("type", "text")], [])
  addButton = addButton.addHandlers([OnClick(AddFlatmate(nameInput.node))])

  div(
    "",
    [
      nameInput,
      div("", [addButton, cancelButton], [Attribute("style", "margin-top: 20px;")], [])
    ],
    [Attribute("style", styles("addFlatmate"))], []
  )
}
def viewTitleBar(): HtmlElement[Event] / SettingsModel = {
  val title = div("WG-Manager", [], [Attribute("style", styles("title"))], [])
  val settingsButton = button("Settings", [], [Attribute("style", styles("settingsButton"))], [OnClick(OpenSettings())])

  val titleBar = div("", 
    [title, settingsButton], 
    [Attribute("style", styles("titleBar"))], 
    [])
  titleBar
}
// def viewSettings(): HtmlElement[Event] / SettingsModel = {
  
// }



def main() = {
  // Download the sql.js library
  addScriptToBody("https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.12.0/sql-wasm.js")

  // request the database file 
  val database = fetchDatabase("/database")
  val flatmates = database.getFlatmates()
  flatmates.foreach { flatmate =>
    flatmate.foreach { name =>
      consoleLog(name)
    }
  }
  
  documentBody.setAttribute("style", styles("body"))
  val appDiv = getElementById("app").getOrElse { 
    val newDiv = createElement("div").setAttribute("id", "app")
    documentBody.appendChild(newDiv)
  }
  appDiv.setAttribute("style", styles("app"))

  run(appDiv, 0, Application(
    box { (ev) =>
      with settingsController
      ev.dispatchSettings()
    },
    box {
      with settingsController
      consoleLog("rendering title bar")
      viewTitleBar()
    }
  ))
}