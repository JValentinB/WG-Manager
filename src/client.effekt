// Based on Exercise5
module client

import src/utils/dom
import src/utils/counter
import src/database/databaseWeb
import src/database/data
import src/styles
import src/svgIcons

import ref
import string

type Event { 
  Change(n: Int);
  Reset();
  BorderOn(node: Node);
  BorderOff(node: Node);
  AddFlatmate(input: Node);
  Cancel();
  SwitchSection(section: String);
  ShowAddMenu(section: String);
  HideAddMenu(section: String);
}

interface Model {
  def change(n: Int): Unit
  def reset(): Unit
  def count(): Int
  def borderOn(node: Node): Unit
  def borderOff(node: Node): Unit
  def switchSection(section: String): Unit
  def showAddMenu(section: String): Unit
  def hideAddMenu(section: String): Unit
}
interface DataModel {
  def addFlatmate(input: Node): Unit
  def cancel(): Unit
}


def runApp(): Unit = {
  // request the database file 
  var database in global = fetchDatabase("/database")
  var flatmates in global = database.getFlatmates()
  var tasks in global = database.getTasks()
  var consumables in global = database.getConsumables()

  def updateDatabase(): Unit = {
    database = fetchDatabase("/database")
  }

  def updateDataCategoryFromDatabase(category: String): Unit = {
    category match {
      case "flatmates" => flatmates = database.getFlatmates()
      case "tasks" => tasks = database.getTasks()
      case "consumables" => consumables = database.getConsumables()
      case _ => ()
    }
  }



  def run[St](root: Node, init: St, app: Application[St, Event]): Unit = app match {
    case Application(update, view) =>
      // rootElement.attributes.foreach { attr => 
      //   rootElement.node.setAttribute(attr.name, attr.value)
      //   ()
      // }
      
      // val root = rootElement.node
      val inbox = ref[List[Event]](Nil())
      val state = ref(init)

      def send(ev: Event): Unit = inbox.set(Cons(ev, inbox.get))

      def render(html: HtmlElement[St, Event]): Node = {
        var node = html.node
        node = node.innerHTML(html.text) // set the text of the node
        // either run the app or render the children
        html.app match {
          case Some(app) => run(node, state.get, app)
          case None() => html.children.foreach { child => 
            node.appendChild(child.render)
            ()
          }
        }
        html.attributes.foreach { attr => 
          node.setAttribute(attr.name, attr.value)
          ()
        }
        html.handlers.foreach { handler =>
          handler match {
            case OnClick(ev) => {
              node.onClick(box { send(ev) })
            }
            case OnChange(ev) => ()
            case OnMouseEnter(ev) => {
              node.onMouseEnter(box { send(ev) })
            }
            case OnMouseLeave(ev) => node.onMouseLeave(box { send(ev) })
          }
          ()
        }
        node
      }

      // renders the app with the current state
      def render(): Unit = {
        val rendered = statefully(state) { view() }.render
        root.clear;
        root.appendChild(rendered);
        ()
      }

      def loop(deadline: IdleDeadline): Unit = {
        val messages = inbox.get.reverse
        inbox.set(Nil())

        if (messages.nonEmpty) {
          messages.foreach { ev =>
            ev match {
              case Change(n) => {
                statefully(state) { update(ev) }
                render()
              }
              case Reset() => {
                statefully(state) { update(ev) }
                render()
              }
              case AddFlatmate(input) => {
                statefully(state) { update(ev) }
                render()
              }
              case _ => statefully(state) { update(ev) }
            }
          }
        }
        requestIdleCallback(box loop)
      }

      render()
      requestIdleCallback(box loop)
  }


  def dispatch(msg: Event) = {
    msg match {
      case Change(n) => do change(n)
      case Reset() => do reset()
      case BorderOn(node) => do borderOn(node)
      case BorderOff(node) => do borderOff(node)
      case SwitchSection(section) => do switchSection(section)
      case ShowAddMenu(section) => do showAddMenu(section)
      case HideAddMenu(section) => do hideAddMenu(section)
      case _ => ()
    }
  }
  def dispatchData(msg: Event) = {
    msg match {
      case AddFlatmate(input) => do addFlatmate(input) 
      case Cancel() => do cancel()
      case _ => ()
    }
  }


  def mainController[R] { prog: => R / Model }: R / State[Int] =
    try { prog() }
    with Model {
      def count() = resume(do getState())
      def change(n: Int) = {
        val response = post("/change/" ++ show(n))
        do setState(getCount(response))
        resume(())
      }
      def reset() = {
        val response = post("/reset")
        do setState(getCount(response))
        resume(())
      }
      def borderOn(node: Node) = {
        node.setStyle("outline", "1px solid #287aa6")
        resume(())
      }
      def borderOff(node: Node) = {
        node.setStyle("outline", "none")
        resume(())
      }
      def switchSection(section: String) = {
        ["tasks", "consumables", "flatmates"].foreach { id =>
          val sectionDiv = getElementById(id ++ "Settings")
          sectionDiv match {
            case Some(node) => {
              node.toggleDisplay(section == id)
            }
            case None() => ()
          }
          val sectionButton = getElementById(id ++ "Button")
          sectionButton match {
            case Some(node) => {
              if (section == id) {
                node.setAttribute("style", stylesNavBar("navButtonActive"))
              } else {
                node.setAttribute("style", stylesNavBar("navButton"))
              }
              ()
            }
            case None() => ()
          }
          ()
        }
        resume(())
      }
      def showAddMenu(section: String) = {
        toggleAddMenu(section, true)
        resume(())
      }
      def hideAddMenu(section: String) = {
        toggleAddMenu(section, false)
        resume(())
      }
  }
  def dataController[R] { prog: => R / DataModel }: R / State[Int] =
    try { prog() }
    with DataModel {
      def addFlatmate(input: Node) = {
        val name = input.getValue()
        if (name != "") {
          val response = post("/addFlatmate", "{\"name\":\"" ++ name ++ "\"}")
          updateDatabase()
          updateDataCategoryFromDatabase("flatmates")
          ()
        }
        resume(())
      }
      def cancel() = {
        resume(())
      }
  }




  def viewAddButton(section: String): HtmlElement[Int, Event] / Model = {
    val addButton = button("+", [], 
      [Attribute("style", styles("addButton")), Attribute("id", section ++ "AddButton")], 
      [OnClick(ShowAddMenu(section))], None()
    )
    addButton
  }
  def viewAddFlatmate(): HtmlElement[Int, Event] / { Model, DataModel } = {
    val input = input("", [], 
      [Attribute("style", stylesAddFlatmate("textInput")), Attribute("placeholder", "Enter flatmate name")], 
      [], None()
    )

    val confirmButton = button("Add", [], 
      [Attribute("style", styles("groupButton"))], 
      [OnClick(AddFlatmate(input.node))], None()
    )
    val cancelButton = button("Cancel", [], 
      [Attribute("style", styles("groupButton"))], 
      [OnClick(HideAddMenu("flatmates"))], None()
    )
    val buttonContainer = div("", [confirmButton, cancelButton], [Attribute("style", styles("buttonGroup"))], [], None())
    val container = div("", 
      [input, buttonContainer], 
      [Attribute("style", stylesAddFlatmate("addMenu")), Attribute("id", "flatmatesAddMenu")],
      [], None()
    )
    container
  }

  def viewNavigationBar(): HtmlElement[Int, Event] / Model = {
    val tasksButton = button(svg("tasks"), [], 
      [Attribute("style", stylesNavBar("navButtonActive")), Attribute("id", "tasksButton")], 
      [OnClick(SwitchSection("tasks"))], None()
    )
    val consumButton = button(svg("consumables"), [], 
      [Attribute("style", stylesNavBar("navButton")), Attribute("id", "consumablesButton")], 
      [OnClick(SwitchSection("consumables"))], None()
    )
    val flatmatesButton = button(svg("flatmates"), [], 
      [Attribute("style", stylesNavBar("navButton")), Attribute("id", "flatmatesButton")], 
      [OnClick(SwitchSection("flatmates"))], None()
    )
    val wrapper = div("", [tasksButton, consumButton, flatmatesButton], [Attribute("style", styles("wrapper"))], [], None())

    val navBarApp = Application[Int, Event](
      box { (ev) => 
        with mainController
        ev.dispatch()
      },
      box { 
        with mainController
        wrapper
      }
    )
    val navBar = div("", 
      [], [Attribute("style", stylesNavBar("navBar"))], 
      [], Some(navBarApp))
    navBar
  }

  def viewTasks(): HtmlElement[Int, Event] / Model = {
    var taskCards = empty[HtmlElement[Int, Event]]()
    // tasks.foreach { task =>
    //     val taskCard = div(task.name, [], [Attribute("style", stylesAddFlatmate("taskCard"))], [], None())
    //     taskCards = taskCards.append([taskCard])
    //     ()
    // }
    // Create the button to add a new task
    val addButton = viewAddButton("tasks")
    // Create the containers
    val cardsContainer = div("", taskCards, [Attribute("style", stylesAddFlatmate("cardsContainer"))], [], None())
    val buttonContainer = div("", [addButton], [Attribute("style", stylesAddFlatmate("buttonContainer"))], [], None())
    val container = div("", [cardsContainer, buttonContainer], [Attribute("style", stylesAddFlatmate("taskContainer"))], [], None())
    
    div("", [container], [Attribute("id", "tasksSettings"), Attribute("style", "display: block")], [], None())
  }
  def viewConsumables(): HtmlElement[Int, Event] / Model = {
    var consumableCards = empty[HtmlElement[Int, Event]]()
    // consumables.foreach { consumable =>
    //     val consumableCard = div(consumable.name, [], [Attribute("style", stylesAddFlatmate("consumableCard"))], [], None())
    //     consumableCards = consumableCards.append([consumableCard])
    //     ()
    // }
    // Create the button to add a new consumable
    val addButton = viewAddButton("consumables")
    // Create the containers
    val cardsContainer = div("", consumableCards, [Attribute("style", stylesAddFlatmate("cardsContainer"))], [], None())
    val buttonContainer = div("", [addButton], [Attribute("style", stylesAddFlatmate("buttonContainer"))], [], None())
    val container = div("", [cardsContainer, buttonContainer], [Attribute("style", stylesAddFlatmate("consumableContainer"))], [], None())
    
    div("", [container], [Attribute("id", "consumablesSettings"), Attribute("style", "display: none")], [], None())
  }
  def viewFlatmates(): HtmlElement[Int, Event] / { Model, DataModel } = { 

    def menu(): HtmlElement[Int, Event] / { Model, DataModel } = {
      var cards = empty[HtmlElement[Int, Event]]()
      flatmates.foreach { flatmate =>
        val flatmateCard = div(flatmate.name, [], [Attribute("style", stylesAddFlatmate("flatmateCard"))], [], None())
        cards = cards.append([flatmateCard])
        ()
      }
      val cardsContainer = div("", cards, [Attribute("style", stylesAddFlatmate("cardsContainer"))], [], None())

      val addButton = viewAddButton("flatmates")
      val addFlatmateMenu = viewAddFlatmate()
      val addContainer = div("", [addButton, addFlatmateMenu], [Attribute("style", stylesAddFlatmate("addContainer"))], [], None())

      div("", [addContainer, cardsContainer], [Attribute("style", stylesAddFlatmate("flatmateContainer"))], [], None())
    }
    val flatmateApp = Application[Int, Event](
      box { (ev) => 
        with mainController
        with dataController
        ev.dispatch()
        ev.dispatchData()
      },
      box { 
        with mainController
        with dataController
        menu()
      }
    )
    div("", [], [Attribute("id", "flatmatesSettings"), Attribute("style", "display: none")], [], Some(flatmateApp))
  }


  def viewMain(): HtmlElement[Int, Event] / { Model, DataModel } = {
    val navBar = viewNavigationBar()
    val tasksContainer = viewTasks()
    val consumablesContainer = viewConsumables()
    val flatmateContainer = viewFlatmates()
    val container = div("", 
      [navBar, tasksContainer, consumablesContainer, flatmateContainer], 
      [Attribute("style", styles("appContainer"))], [], None()
    )
    container
  }



  documentBody.setAttribute("style", styles("body"))
  val appDiv = getElementById("app").getOrElse { 
    val newDiv = createElement("div").setAttribute("id", "app")
    documentBody.appendChild(newDiv)
  }
  appDiv.setAttribute("style", styles("app"))

  run(appDiv, 0, Application(
    box { (ev) => ()},
    box { 
      with mainController
      with dataController
      viewMain()
    }
  ))
  ()
}


def main() = {
  // Download the sql.js library
  addScriptToBody("https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.12.0/sql-wasm.js")

  runApp()
  ()
}