// Based on Exercise5
module client

import src/utils/dom
import src/utils/counter

import ref
import string

extern async def fetch(url: String): String =
  jsWeb """$effekt.capture(callback => 
    fetch(${url})
      .then(r => r.json())
      .then(result => callback(result))
      .catch(error => console.error(error))
  )"""

extern async def post(url: String): String =
  jsWeb """$effekt.capture(callback => 
    fetch(${url}, { method: 'POST' })
      .then(r => r.json())
      .then(result => callback(result))
      .catch(error => console.error(error))
  )"""

extern pure def getCount(json: String): Int =
  jsWeb """(data => {
      return data.count;
    })(${json})"""

interface Model {
  def change(n: Int): Unit
  def reset(): Unit
  def count(): Int
  def borderOn(node: Node): Unit
  def borderOff(node: Node): Unit
}

type Event { 
  Change(n: Int);
  Reset();
  BorderOn(node: Node);
  BorderOff(node: Node);
}

def dispatch(msg: Event) = {
  msg match {
    case Change(n) => do change(n)
    case Reset() => do reset()
    case BorderOn(node) => do borderOn(node)
    case BorderOff(node) => do borderOff(node)
  }
}

def counterModel[R] { prog: => R / Model }: R / State[Int] =
  try { prog() }
  with Model {
    def count() = resume(do getState())
    def change(n: Int) = {
      val response = post("http://localhost:3000/change/" ++ show(n))
      do setState(getCount(response))
      resume(())
    }
    def reset() = {
      val response = post("http://localhost:3000/reset")
      do setState(getCount(response))
      resume(())
    }
    def borderOn(node: Node) = {
      consoleLog("borderOn")
      node.setStyle("outline", "1px solid #287aa6")
      resume(())
    }
    def borderOff(node: Node) = {
      node.setStyle("outline", "none")
      resume(())
    }
}

record MyApplication[St, Ev](
  update: Ev => Unit / State[St] at {io, async},
  view: () => HtmlElement[Ev] / State[St] at {io, async}
)

def myRun[St](rootElement: HtmlElement[Event], init: St, app: MyApplication[St, Event]) = app match {
  case MyApplication(update, view) =>
    val root = rootElement.node
    val inbox = ref[List[Event]](Nil())
    val state = ref(init)

    def send(ev: Event): Unit = inbox.set(Cons(ev, inbox.get))

    def render(html: HtmlElement[Event]): Node = {
      consoleLog("rendering")
      var node = html.node
      node = node.innerHTML(html.text)
      html.children.foreach { child => 
        node.appendChild(child.render)
        ()
      }
      html.attributes.foreach { attr => 
        node.setAttribute(attr.name, attr.value)
        ()
      }
      html.handlers.foreach { handler =>
        handler match {
          case OnClick(ev) => {
            node.onClick(box { send(ev) })
          }
          case OnChange(ev) => ()
          case OnMouseEnter(ev) => {
            node.onMouseEnter(box { send(ev) })
          }
          case OnMouseLeave(ev) => node.onMouseLeave(box { send(ev) })
        }
        ()
      }
      node
    }

    // renders the app with the current state
    def render(): Unit = {
      val rendered = statefully(state) { view() }.render
      root.clear;
      root.appendChild(rendered);
      ()
    }

    def loop(deadline: IdleDeadline): Unit = {
      val messages = inbox.get.reverse
      inbox.set(Nil())

      if (messages.nonEmpty) {
        messages.foreach { ev =>
          ev match {
            case Change(n) => {
              statefully(state) { update(ev) }
              render()
            }
            case Reset() => {
              statefully(state) { update(ev) }
              render()
            }
            case _ => statefully(state) { update(ev) }
          }
        }
      }
      requestIdleCallback(box loop)
    }

    render()
    requestIdleCallback(box loop)
}

def view(): HtmlElement[Event] / Model = {
  val buttonStyle = """
    display: inline-block;
    margin: 0 10px;
    padding: 10px 20px;
    background: #287aa6;
    border: none;
    border-radius: 5px;
    color: white;
    cursor: pointer;
  """
  var button1 = button("-1", [], [Attribute("style", buttonStyle), Attribute("id", "button1")], [OnClick(Change(-1))])
  var button2 = button("+1", [], [Attribute("style", buttonStyle), Attribute("id", "button2")], [OnClick(Change(1))])
  var button3 = button("Reset", [], [Attribute("style", buttonStyle), Attribute("id", "button3")], [OnClick(Reset())])
  button1 = button1.addHandlers([OnMouseEnter(BorderOn(button1.node)), OnMouseLeave(BorderOff(button1.node))])
  button2 = button2.addHandlers([OnMouseEnter(BorderOn(button2.node)), OnMouseLeave(BorderOff(button2.node))])
  button3 = button3.addHandlers([OnMouseEnter(BorderOn(button3.node)), OnMouseLeave(BorderOff(button3.node))])

  div(
    "",
    [
      div("Hello World!",[], [Attribute("style", "color: white;")], []),
      div("Current value: " ++ show( do count()), [], [Attribute("style", "color: white;")], []),
      div("", [button1, button2, button3], [Attribute("style", "margin-top: 20px;")], [])
    ],
    [Attribute("style", "text-align: center;")], []
  )
}


def main() = {
  // Get initial state from server
  val response = fetch("http://localhost:3000/count")
  consoleLog(response)
  val initialCount = getCount(response)

  documentBody.setAttribute("style", "background: black; font-family: sans-serif;")
  val appStyle = """
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    color: white;
  """
  val attributesList = [Attribute("id", "app"), Attribute("style", appStyle)]
  val appDiv = getElementById("app").getOrElse { 
    val newDiv = createElement("div")
    attributesList.foreach{ attr => 
      newDiv.setAttribute(attr.name, attr.value) 
      ()
    }
    documentBody.appendChild(newDiv)
  }
  val appElement = HtmlElement(appDiv, "div", "", None(), [], attributesList, [])

  myRun(appElement, initialCount, MyApplication(
    box { (ev) =>
      with counterModel
      ev.dispatch()
    },
    box {
      with counterModel
      view()
    }))
}