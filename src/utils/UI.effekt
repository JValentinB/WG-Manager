// Based on Exercise 5
module UI

import src/utils/dom
// import src/utils/misc

import ref
import string


record Application[St, Ev](
  update: Ev => Unit / State[St] at {io, global, async},
  view: () => HtmlElement[St, Ev] / State[St] at {io, global, async}
)

record HtmlElement[St, Ev] (
  node: Node,
  tag: String,
  text: String, 
  app: Option[Application[St, Ev]],
  children: List[HtmlElement[St, Ev]], 
  attributes: List[Attribute],
  handlers: List[EventHandler[Ev]]
)

record Attribute (
  name: String,
  value: String
)

type EventHandler[Ev] { 
  OnClick(handler: Ev);
  OnChange(handler: (String) => Ev at {});
  OnMouseEnter(handler: Ev);
  OnMouseLeave(handler: Ev)
}

// effect addingChild[St, Ev](child: HtmlElement[St, Ev]): Unit

def button[St, Ev](text: String, children: List[HtmlElement[St, Ev]], attributes: List[Attribute], handlers: List[EventHandler[Ev]], app: Option[Application[St, Ev]]) =
  HtmlElement(createElement("button"), "button", text, app, children, attributes, handlers)

def div[St, Ev](text: String, children: List[HtmlElement[St, Ev]], attributes: List[Attribute], handlers: List[EventHandler[Ev]], app: Option[Application[St, Ev]]) =
  HtmlElement(createElement("div"), "div", text, app, children, attributes, handlers)

def input[St, Ev](text: String, children: List[HtmlElement[St, Ev]], attributes: List[Attribute], handlers: List[EventHandler[Ev]], app: Option[Application[St, Ev]]) =
  HtmlElement(createElement("input"), "input", text, app, children, attributes, handlers)



def appendChild[St, Ev](parent: HtmlElement[St, Ev], child: HtmlElement[St, Ev]): Unit = {
  parent.children.append([child])
  ()
}

def addHandlers[St, Ev](element: HtmlElement[St, Ev], handlers: List[EventHandler[Ev]]): HtmlElement[St, Ev] = {
  val newHandlers = element.handlers.append(handlers)
  val newElement = HtmlElement(element.node, element.tag, element.text, element.app, element.children, element.attributes, newHandlers)
  newElement
}

def toggleDisplay(node: Node): Unit = {
  val currentDisplay = node.getStyleValue("display")
  if (currentDisplay == "none") {
    node.setStyle("display", "block")
    ()
  } else {
    node.setStyle("display", "none")
    ()
  }
}
def toggleDisplay(node: Node, show: Bool): Unit = {
  if (show) {
    node.setStyle("display", "block")
    ()
  } else {
    node.setStyle("display", "none")
    ()
  }
}
def toggleDisplay(node: Node, show: Bool, mode: String): Unit = {
  if (show) {
    node.setStyle("display", mode)
    ()
  } else {
    node.setStyle("display", "none")
    ()
  }
}

def toggleAddMenu(section: String, show: Bool) = {
  val addFlatmate = getElementById(section ++ "AddMenu")
  addFlatmate match {
    case Some(node) => {
      node.toggleDisplay(show)
    }
    case None() => ()
  }
  val addButton = getElementById(section ++ "AddButton")
  addButton match {
    case Some(node) => {
      node.toggleDisplay(show == false)
    }
    case None() => ()
  }
}

def toggleEditMenu(section: String, entryName: String) = {
  val container = getElementById(section ++ "Edit")
  container match {
    case Some(node) => {
      val children = node.getChildren().toList()
      children.foreach { child =>
        if (child.getID() == entryName ++ "Edit") {
          child.toggleDisplay(true, "flex")
        }
        else {
          child.toggleDisplay(false)
        }
      }
      ()
    }
    case None() => ()
  }
}



interface ServerMessage {
  def success(): Unit
  def error(msg: String): Unit
}

def checkResponse(response: String): Unit / ServerMessage = {
  with on[OutOfBounds].default { consoleLog("Index out of bounds") };
  with on[WrongFormat].default { consoleLog("Wrong Format") };

  var length = response.length
  var res = response.substring(1, length - 1)
  val list = res.split(":")

  val key = list.get(0)
  val value = list.get(1)
  if (key == "\"success\"" && value == "true") {
    do success()
  } else if (key == "\"error\"") {
    do error(value)
  } else {
    do error("Something went wrong")
  }
}



interface State[St] {
  def getState(): St
  def setState(s: St): Unit
}

// Handle the `State` effect using a `Ref` (global mutable reference)
def statefully[R, St](r: Ref[St]) { prog: () => R / State[St] }: R =
  try { prog() } with State[St] {
    def getState() = resume(r.get())
    def setState(newState) = { r.set(newState); resume(()) }
  }
