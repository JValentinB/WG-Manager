module database

import ref
import array
import io/filesystem
import option

import src/utils/dom


// --------------------------------------------------------------------------------
// There are three main types of data for this webtool: 
// - a flatmate
//   - name
// - a task
//   - name
//   - description
//   - schedule (how often it should be done)
//   - last time it was done
//   - assigned roommates
//   - roommates next in turn
// - a common consumable
//   - name
//   - description
//   - urgency (0 for not urgent, 1 for should be bought/done soon, 2 for needs to be bought immediately)
//   - assigned roommates
//     - how many times each roommate has bought it
// --------------------------------------------------------------------------------

// Sqlite FFI definitions
extern type Module
extern type Database
extern type Statement

extern async def databaseFileExists(filePath: String): Bool =
  jsNode """$effekt.capture((callback) => {
    const exists = fs.existsSync(${filePath});
    callback(exists);
  })"""

extern async def initDatabase(): Database =
jsNode """$effekt.capture(async (callback) => {
    const sql = require('sql.js');
    const initSqlJs = sql.default;
    const SQL = await initSqlJs();
    const db = new SQL.Database();
    callback(db);
  })"""

extern async def openDatabase(filePath: String): Database =
  jsNode """$effekt.capture(async (callback) => {
    const sql = require('sql.js');
    const initSqlJs = sql.default;
    const SQL = await initSqlJs();
    const fileBuffer = fs.readFileSync(${filePath});
    const db = new SQL.Database(fileBuffer);
    callback(db);
  })"""

extern async def saveDatabase(db: Database, filePath: String): Unit =
  jsNode """$effekt.capture(async (callback) => {
    const binaryData = ${db}.export();
    fs.writeFileSync(${filePath}, Buffer.from(binaryData));
    callback();
  })"""

extern async def createTable(db: Database, query: String): Unit =
  jsNode """$effekt.capture((callback) => {
    ${db}.run(${query});
    callback();
  })"""

extern async def insertData(db: Database, query: String, params: Array[String]): Unit =
  jsNode """$effekt.capture(async (callback) => {
    const stmt = ${db}.prepare(${query});
    stmt.run(${params});
    callback();
  })"""

extern async def readData(db: Database, query: String): Array[Array[String]] =
  jsNode """$effekt.capture((callback) => {
    const stmt = ${db}.prepare(${query});
    const rows = [];
    while (stmt.step()) {
      const row = stmt.getAsObject();
      const rowArray = Object.values(row).map(value => value?.toString() || "null");
      rows.push(rowArray);
    }
    callback(rows);
  })"""

extern async def readDataWithParams(db: Database, query: String, param: String): Array[String] =
  jsNode """$effekt.capture((callback) => {
    const stmt = ${db}.prepare(${query});
    stmt.bind(${param});
    callback(stmt.getAsObject());
  })"""


def createFlatmateTable(db: Database): Unit = {
  val query = """
    CREATE TABLE IF NOT EXISTS flatmates (
      id INTEGER PRIMARY KEY,
      name TEXT
    )
  """
  db.createTable(query)
}

def createTaskTable(db: Database): Unit = {
  val query = """
    CREATE TABLE IF NOT EXISTS tasks (
      id INTEGER PRIMARY KEY,
      name TEXT,
      description TEXT,
      schedule TEXT,
      last_done TEXT,
      assigned_roommates TEXT,
      roommates_next_in_turn TEXT
    )
  """
  db.createTable(query)
}

def createConsumableTable(db: Database): Unit = {
  val query = """
    CREATE TABLE IF NOT EXISTS consumables (
      id INTEGER PRIMARY KEY,
      name TEXT,
      description TEXT,
      urgency INTEGER,
      assigned_roommates TEXT
    )
  """
  db.createTable(query)
}


def insertFlatmate(db: Database, name: String): Unit = {
  val query = "INSERT INTO flatmates (name) VALUES (?)"
  db.insertData(query, [name].fromList())
}
def insertTask(db: Database, list: List[String]): Unit = {
  // List has to contain: name, description, schedule, last_done, assigned_roommates, roommates_next_in_turn
  val query = """
    INSERT INTO tasks (name, description, schedule, last_done, assigned_roommates, roommates_next_in_turn) VALUES (?, ?, ?, ?, ?, ?)
  """
  db.insertData(query, list.fromList())
}
def insertConsumable(db: Database, list: List[String]): Unit = {
  // List has to contain: name, description, urgency, assigned_roommates
  val query = """
    INSERT INTO consumables (name, description, urgency, assigned_roommates) VALUES (?, ?, ?, ?)
  """
  db.insertData(query, list.fromList())
}

// Functions to retrieve whole tables
def getFlatmates(db: Database): Array[Array[String]] = {
  val query = "SELECT name FROM flatmates"
  db.readData(query)
}
def getTasks(db: Database): Array[Array[String]] = {
  val query = "SELECT * FROM tasks"
  db.readData(query)
}
def getConsumables(db: Database): Array[Array[String]] = {
  val query = "SELECT * FROM consumables"
  db.readData(query)
}

// Functions to retrieve single entries
def getFlatmateInfo(db: Database, name: String): Array[String] = {
  val query = "SELECT * FROM flatmates WHERE name = ?"
  db.readDataWithParams(query, name)
}
def getTaskInfo(db: Database, name: String): Array[String] = {
  val query = "SELECT * FROM tasks WHERE name = ?"
  db.readDataWithParams(query, name)
}
def getConsumableInfo(db: Database, name: String): Array[String] = {
  val query = "SELECT * FROM consumables WHERE name = ?"
  db.readDataWithParams(query, name)
}

def openWGManagerDatabase(databasePath: String): Database = {
  val dbExists = databaseFileExists(databasePath)
  val db = if (dbExists) {
    println("Database file exists, opening...")
    openDatabase(databasePath)
  } else {
    println("Database file does not exist, creating...")
    val initDb = initDatabase()
    initDb.createFlatmateTable()
    initDb.createTaskTable()
    initDb.createConsumableTable()

    saveDatabase(initDb, databasePath)
    initDb
  }
  db
}


def main() = {
  val databasePath = "./data.sqlite"

  val dbExists = databaseFileExists(databasePath)
  val db = if (dbExists) {
    println("Database file exists, opening...")
    openDatabase(databasePath)
  } else {
    println("Database file does not exist, creating...")
    val initDb = initDatabase()
    initDb.createFlatmateTable()
    initDb.createTaskTable()
    initDb.createConsumableTable()

    saveDatabase(initDb, databasePath)
    initDb
  }
  // db.insertFlatmate("Robert")
  // db.insertTask(["Task 1", "Description 1", "Schedule 1", "Last done 1", "Assigned roommates 1", "Roommates next in turn 1"])
  // db.saveDatabase(databasePath)

  val flatmates = getFlatmates(db)
  flatmates.foreach { flatmate =>
    flatmate.foreach { name =>
      println(name)
    }
  }
}