module data

import ref
import array
import io/filesystem
import option

import src/utils/misc

record Flatmate (
  name: String,
  color: String
)
record Task (
  name: String,
  description: String,
  schedule: Int,                  // In days
  lastDone: Int,                  // Timestamp integer in milliseconds
  assignedFlatmates: List[String] // List of flatmate names in order of turn
)
record Consumable (
  name: String,
  description: String,
  count: List[(String, Int)],     // List of (flatmate name, count of consumable bought)
  urgency: Int                    // 0 = not urgent, 1 = almost empty, 2 = empty
)

def toListOfStrings(flatmate: Flatmate): List[String] = [flatmate.name, flatmate.color]
def toListOfStrings(task: Task): List[String] = {
  var flatmates = ""
  task.assignedFlatmates.foreach { flatmate =>
    flatmates = flatmates ++ flatmate ++ ","
  }
  [task.name, task.description, show(task.schedule), show(task.lastDone), flatmates]
}
def toListOfStrings(consumable: Consumable): List[String] = {
  var count_string = ""
  consumable.count.foreach { case (flatmate, count) =>
    count_string = count_string ++ flatmate ++ ":" ++ show(count) ++ ","
  }
  [consumable.name, consumable.description, count_string, show(consumable.urgency)]
}

def toFlatmate(list: List[String]): Flatmate = {
  with on[OutOfBounds].default { println("Index out of bounds"); Flatmate("This is a OutOfBounds bug!", "red") };
  with on[WrongFormat].default { println("Wrong Format"); Flatmate("This a WrongFormat bug!", "") };

  Flatmate(list.get(0), list.get(1))
}
def toTask(list: List[String]): Task = {
  with on[OutOfBounds].default { println("Index out of bounds"); Task("This is a OutOfBounds bug!", "", 0, 0, []) };
  with on[WrongFormat].default { println("Wrong Format"); Task("This a WrongFormat bug!", "", 0, 0, []) };

  val flatmateString = list.get(4)
  if (flatmateString == "") {
    Task(list.get(0), list.get(1), list.get(2).toInt, list.get(3).toInt, [])
  } else {
    val flatmates = flatmateString.split(",").filter { name => name == "" }
    Task(list.get(0), list.get(1), list.get(2).toInt, list.get(3).toInt, flatmates) 
  }
}
def toConsumable(list: List[String]): Consumable = {
  with on[OutOfBounds].default { println("Index out of bounds"); Consumable("This is a OutOfBounds bug!", "", [], 0) };
  with on[WrongFormat].default { println("Wrong Format"); Consumable("This a WrongFormat bug!", "", [], 0) };

  val countString = list.get(2)
  if (countString == "") {
    Consumable(list.get(0), list.get(1), [], list.get(3).toInt)
  } else {
    val count = countString.split(",").filter { entry => entry == ""}.map { entry =>
      val split = entry.split(":")
      (split.get(0), split.get(1).toInt)
    }
    Consumable(list.get(0), list.get(1), count, list.get(3).toInt)
  }
}

// Functions to modify task data
def assignFlatmate(task: Task, flatmate: String): Task = {
  val assigned = task.assignedFlatmates.append([flatmate])
  Task(task.name, task.description, task.schedule, task.lastDone, assigned)
}
def unassignFlatmate(task: Task, flatmate: String): Task = {
  val assigned = task.assignedFlatmates.filter { name => name == flatmate }
  Task(task.name, task.description, task.schedule, task.lastDone, assigned)
}
def renameFlatmate(task: Task, oldFlatmate: String, newFlatmate: String): Task = {
  val flatmateIndex = task.assignedFlatmates.indexOf(oldFlatmate) { (name1, name2) => name1 == name2 }
  val assigned = task.assignedFlatmates.updateAt(flatmateIndex) { name => newFlatmate }
  Task(task.name, task.description, task.schedule, task.lastDone, assigned)
}
def taskDone(task: Task, flatmate: String): Task = {
  val lastDone = getCurrentTime()
  val flatmateIndex = task.assignedFlatmates.indexOf(flatmate) { (name1, name2) => name1 == name2 }
  val assigned = task.assignedFlatmates.deleteAt(flatmateIndex)
  Task(task.name, task.description, task.schedule, lastDone, assigned.append([flatmate]))
}

// Functions to modify consumable data
def assignFlatmate(consumable: Consumable, flatmate: String): Consumable = {
  val count = consumable.count.append([(flatmate, 0)])
  Consumable(consumable.name, consumable.description, count, consumable.urgency)
}
def unassignFlatmate(consumable: Consumable, flatmate: String): Consumable = {
  val count = consumable.count.filter { entry => entry match { case (name, _) => name == flatmate } }
  Consumable(consumable.name, consumable.description, count, consumable.urgency)
}
def renameFlatmate(consumable: Consumable, oldFlatmate: String, newFlatmate: String): Consumable = {
  val countIndex = consumable.count.indexOf(oldFlatmate) { (name1, count) => 
    count match {
      case (name2, _) => name1 == name2
    }
  }
  val count = consumable.count.updateAt(countIndex) { entry => 
    entry match {
      case (name, count) => (newFlatmate, count)
    }
  }
  Consumable(consumable.name, consumable.description, count, consumable.urgency)
}
def countIncrement(consumable: Consumable, flatmate: String, x: Int): Consumable = {
  val countIndex = consumable.count.indexOf(flatmate) { (name1, count) => 
    count match {
      case (name2, _) => name1 == name2
    }
  }
  val count = consumable.count.updateAt(countIndex) { entry => 
    entry match {
      case (name, count) => (name, count + x)
    }
  }
  Consumable(consumable.name, consumable.description, count, consumable.urgency)
}
def sortCount(consumable: Consumable): List[(String, Int)] = {
  val count = consumable.count
  val sortedCount = count.sortBy() { (entry1, entry2) =>
    entry1 match {
      case (_, count1) => {
        entry2 match {
          case (_, count2) => count1 <= count2
        }
      }
    }
  }
  sortedCount
}


// MISC DATA FUNCTIONS_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
// Only usable in web
def nextTimeToBeDone(task: Task): String = {
  val nextTime = task.lastDone.addDays(task.schedule)
  nextTime.timestampToFormattedDate()
}
// Only usable in web
def daysUntilNextDue(task: Task): Int = {
  val nextTime = task.lastDone.addDays(task.schedule)
  val currentTime = getCurrentTimeWeb()

  // Normalize timestamps to midnight
  def normalizeToMidnight(timestamp: Int): Int = {
    val millisecondsInADay = 24 * 60 * 60 * 1000
    (timestamp / millisecondsInADay) * millisecondsInADay
  }

  val normalizedNextTime = normalizeToMidnight(nextTime)
  val normalizedCurrentTime = normalizeToMidnight(currentTime)

  // Calculate the difference in days
  (normalizedNextTime - normalizedCurrentTime) / (24 * 60 * 60 * 1000)
}

def emptyCountList(flatmates: List[String]): List[(String, Int)] = flatmates.map { flatmate => (flatmate, 0) }

// Print functions_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
def printFlatmate(flatmate: Flatmate): Unit = {
  val string = "Flatmate: " ++ flatmate.name ++ "\n"
  println(string)
}
def printTask(task: Task): Unit = {
  var flatmates = ""
  task.assignedFlatmates.foreach { flatmate =>
    flatmates = flatmates ++ flatmate ++ ", "
  }

  val string = "Task: " ++ task.name ++ "\n" ++
  "Description: " ++ task.description ++ "\n" ++
  "Schedule: " ++ show(task.schedule) ++ "\n" ++
  "Last time done: " ++ show(task.lastDone) ++ "\n" ++
  "Assigned flatmates: " ++ flatmates ++ "\n";

  println(string)
}
def printConsumable(consumable: Consumable): Unit = {
  var count_string = ""
  consumable.count.foreach { case (flatmate, count) =>
    count_string = count_string ++ flatmate ++ ": " ++ show(count) ++ ", "
  }

  val string = "Consumable: " ++ consumable.name ++ "\n" ++
  "Description: " ++ consumable.description ++ "\n" ++
  "Urgency: " ++ show(consumable.urgency) ++ "\n" ++
  "Flatmate bought count: " ++ count_string ++ "\n";

  println(string)
}