module databaseWeb

import ref
import array
import io/filesystem
import option

import src/database/data



// --------------------------------------------------------------------------------
// There are three main types of data for this webtool: 
// - a flatmate
//   - name
// - a task
//   - name
//   - description
//   - schedule (how often it should be done)
//   - last time it was done
//   - assigned flatmates
//   - flatmate next in turn
// - a common consumable
//   - name
//   - description
//   - assigned flatmates
//   - how many times each flatmate has bought it
//   - urgency (0 for not urgent, 1 for should be bought/done soon, 2 for needs to be bought immediately)
// --------------------------------------------------------------------------------

extern io def consoleLog1[T](msg: T): Unit =
  jsWeb "console.log(${msg})"

// Sqlite FFI definitions
extern type Database

extern async def fetchDatabase(endpoint: String): Database =
  jsWeb """$effekt.capture(callback => {
    const loadSqlJs = () => {
      fetch(window.location.origin + ${endpoint})
        .then(response => {
          if (!response.ok) {
            throw new Error(response.statusText);
          }
          return response.arrayBuffer();
        })
        .then(buffer => {
          console.log("Fetched the database file successfully");
          const config = {
            locateFile: function(file) {
              return 'https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.12.0/' + file;
            }
          };
          initSqlJs(config).then(SQL => {
            console.log("SQL.js initialized");
            const db = new SQL.Database(new Uint8Array(buffer));
            console.log("Database initialized");
            callback(db); // Pass the db instance to the Effekt world
          }).catch(error => {
            console.error("Failed to initialize SQL.js:", error);
          });
        })
        .catch(error => {
          console.error("Error during fetch or processing:", error);
        });
    };
    loadSqlJs();
  })"""

extern async def createTable(db: Database, query: String): Unit =
  jsWeb """$effekt.capture((callback) => {
    ${db}.run(${query});
    callback();
  })"""

extern async def executeQuery(db: Database, query: String, params: Array[String]): Unit =
  jsWeb """$effekt.capture(async (callback) => {
    const stmt = ${db}.prepare(${query});
    stmt.run(${params});
    callback();
  })"""

extern async def readData(db: Database, query: String): Array[Array[String]] =
  jsWeb """$effekt.capture((callback) => {
    const stmt = ${db}.prepare(${query});
    const rows = [];
    while (stmt.step()) {
      const row = stmt.getAsObject();
      const rowArray = Object.values(row).map(value => value?.toString() || "null");
      rows.push(rowArray);
    }
    callback(rows);
  })"""

extern async def readDataWithParams(db: Database, query: String, param: String): Array[String] =
  jsWeb """$effekt.capture((callback) => {
    const stmt = ${db}.prepare(${query});
    stmt.bind([${param}]);
    const rows = [];
    while (stmt.step()) {
      const row = stmt.getAsObject();
      const rowArray = Object.values(row).map(value => value?.toString() || "null");
      rows.push(rowArray);
    }
    callback(rows[0]);
  })"""

extern async def getTableLength(db: Database, table: String): Int =
  jsWeb """$effekt.capture((callback) => {
    const stmt = ${db}.prepare("SELECT COUNT(*) AS count FROM ${table}");
    stmt.step();
    const row = stmt.getAsObject();
    callback(row.count);
  })"""
extern async def isEntryAvailable(db: Database, query: String, name: String): Bool =
  jsWeb """$effekt.capture((callback) => {
    const stmt = ${db}.prepare(${query});
    stmt.bind([${name}]);
    const hasRows = stmt.step();
    stmt.free(); 
    callback(hasRows);
  })"""



def createFlatmateTable(db: Database): Unit = {
  val query = """
    CREATE TABLE IF NOT EXISTS flatmates (
      id INTEGER PRIMARY KEY,
      name TEXT
      color TEXT
    )
  """
  db.createTable(query)
}
def createTaskTable(db: Database): Unit = {
  val query = """
    CREATE TABLE IF NOT EXISTS tasks (
      id INTEGER PRIMARY KEY,
      name TEXT,
      description TEXT,
      schedule TEXT,
      last_done TEXT,
      assigned_flatmates TEXT,
      next_in_turn TEXT
    )
  """
  db.createTable(query)
}
def createConsumableTable(db: Database): Unit = {
  val query = """
    CREATE TABLE IF NOT EXISTS consumables (
      id INTEGER PRIMARY KEY,
      name TEXT,
      description TEXT,
      assigned_flatmates TEXT,
      count TEXT,
      urgency TEXT
    )
  """
  db.createTable(query)
}


interface FlatmateHandler {
  def flatmateInDatabase(name: String): Bool
  def flatmateNotInDatabase(name: String): Bool
}
interface TaskHandler {
  def taskInDatabase(name: String): Bool
  def taskNotInDatabase(name: String): Bool
}
interface ConsumableHandler {
  def consumableInDatabase(name: String): Bool
  def consumableNotInDatabase(name: String): Bool
}

def isFlatmateInDatabase(db: Database, name: String): Bool / FlatmateHandler = {
  val query = "SELECT * FROM flatmates WHERE name = ?"
  if (db.isEntryAvailable(query, name)) {
    do flatmateInDatabase(name)
  } else {
    do flatmateNotInDatabase(name)
  }
}
def isTaskInDatabase(db: Database, name: String): Bool / TaskHandler = {
  val query = "SELECT * FROM tasks WHERE name = ?"
  if (db.isEntryAvailable(query, name)) {
    do taskInDatabase(name)
  } else {
    do taskNotInDatabase(name)
  }
}
def isConsumableInDatabase(db: Database, name: String): Bool / ConsumableHandler = {
  val query = "SELECT * FROM consumables WHERE name = ?"
  if (db.isEntryAvailable(query, name)) {
    do consumableInDatabase(name)
  } else {
    do consumableNotInDatabase(name)
  }
}

// Functions to retrieve whole tables
def getFlatmates(db: Database): List[Flatmate] = {
  val query = "SELECT name, color FROM flatmates"
  val arr = db.readData(query)

  var flatmates = empty[Flatmate]()
  arr.foreach { row =>
    val flatmate = toFlatmate(row.toList())
    flatmates = flatmates.append([flatmate])
    ()
  }
  flatmates
}
def getTasks(db: Database): List[Task] = {
  val query = "SELECT name, description, schedule, last_done, assigned_flatmates, next_in_turn FROM tasks"
  val arr = db.readData(query)

  var tasks = empty[Task]()
  arr.foreach { row =>
    val task = toTask(row.toList())
    tasks = tasks.append([task])
    ()
  }
  tasks
}
def getConsumables(db: Database): List[Consumable] = {
  val query = "SELECT name, description, assigned_flatmates, count, urgency FROM consumables"
  val arr = db.readData(query)

  var consumables = empty[Consumable]()
  arr.foreach { row =>
    consumables = consumables.append([toConsumable(row.toList())])
    ()
  }
  consumables
}

def getFlatmateNames(db: Database): List[String] = {
  val query = "SELECT name FROM flatmates"
  val arr = db.readData(query)

  var names = empty[String]()
  arr.foreach { row =>
    val list = row.toList()
    list match {
      case Cons(name, _) => names = names.append([name])
      case _ => ()
    }
    ()
  }
  names
}

// Functions to retrieve single entries
def getFlatmateByName(db: Database, name: String): Flatmate = {
  try {
    if(isFlatmateInDatabase(db, name)){
      val query = "SELECT name, color FROM flatmates WHERE name = ?"
      val arr = db.readDataWithParams(query, name)
      arr.toList().toFlatmate()
    } else {
      Flatmate("Not in database", "red")
    }
  } with FlatmateHandler {
    def flatmateInDatabase(name: String) = {
      resume(true)
    }
    def flatmateNotInDatabase(name: String) = {
      println("Flatmate " ++ name ++ " not in database.")
      resume(false)
    }
  }
}
def getTaskByName(db: Database, name: String): Task = {
  try {
    if(isTaskInDatabase(db, name)){
      val query = "SELECT name, description, schedule, last_done, assigned_flatmates, next_in_turn FROM tasks WHERE name = ?"
      db.readDataWithParams(query, name).toList().toTask()
    } else {
      Task("Not in database", "No description", 0, 0, [""], "")
    }
  } with TaskHandler {
    def taskInDatabase(name: String) = {
      resume(true)
    }
    def taskNotInDatabase(name: String) = {
      println("Task " ++ name ++ " not in database.")
      resume(false)
    }
  }
}
def getConsumableByName(db: Database, name: String): Consumable = {
  try {
    if(isConsumableInDatabase(db, name)){
      val query = "SELECT name, description, assigned_flatmates, count, urgency FROM consumables WHERE name = ?"
      db.readDataWithParams(query, name).toList().toConsumable()
    } else {
      Consumable("Not in database", "No description", [""], [("", 0)], 0)
    }
  } with ConsumableHandler {
    def consumableInDatabase(name: String) = {
      resume(true)
    }
    def consumableNotInDatabase(name: String) = {
      println("Consumable " ++ name ++ " not in database.")
      resume(false)
    }
  }
}


