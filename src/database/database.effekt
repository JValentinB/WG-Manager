module database

import ref
import array
import io/filesystem
import option

import src/database/data


// --------------------------------------------------------------------------------
// There are three main types of data for this webtool: 
// - a flatmate
//   - name
// - a task
//   - name
//   - description
//   - schedule (how often it should be done)
//   - last time it was done
//   - assigned flatmates
//   - flatmates next in turn
// - a common consumable
//   - name
//   - description
//   - urgency (0 for not urgent, 1 for should be bought/done soon, 2 for needs to be bought immediately)
//   - assigned flatmates
//     - how many times each flatmate has bought it
// --------------------------------------------------------------------------------

// Sqlite FFI definitions
extern type Database

extern async def databaseFileExists(filePath: String): Bool =
  jsNode """$effekt.capture((callback) => {
    const exists = fs.existsSync(${filePath});
    callback(exists);
  })"""

extern async def initDatabase(): Database =
jsNode """$effekt.capture(async (callback) => {
    const sql = require('sql.js');
    const initSqlJs = sql.default;
    const SQL = await initSqlJs();
    const db = new SQL.Database();
    callback(db);
  })"""

extern async def openDatabase(filePath: String): Database =
  jsNode """$effekt.capture(async (callback) => {
    const sql = require('sql.js');
    const initSqlJs = sql.default;
    const SQL = await initSqlJs();
    const fileBuffer = fs.readFileSync(${filePath});
    const db = new SQL.Database(fileBuffer);
    callback(db);
  })"""

extern async def saveDatabase(db: Database, filePath: String): Unit =
  jsNode """$effekt.capture(async (callback) => {
    const binaryData = ${db}.export();
    fs.writeFileSync(${filePath}, Buffer.from(binaryData));
    callback();
  })"""



extern async def createTable(db: Database, query: String): Unit =
  jsNode """$effekt.capture((callback) => {
    ${db}.run(${query});
    callback();
  })"""

extern async def insertData(db: Database, query: String, params: Array[String]): Unit =
  jsNode """$effekt.capture(async (callback) => {
    const stmt = ${db}.prepare(${query});
    stmt.run(${params});
    callback();
  })"""

extern async def readData(db: Database, query: String): Array[Array[String]] =
  jsNode """$effekt.capture((callback) => {
    const stmt = ${db}.prepare(${query});
    const rows = [];
    while (stmt.step()) {
      const row = stmt.getAsObject();
      const rowArray = Object.values(row).map(value => value?.toString() || "null");
      rows.push(rowArray);
    }
    callback(rows);
  })"""

extern async def readDataWithParams(db: Database, query: String, param: String): Array[String] =
  jsNode """$effekt.capture((callback) => {
    const stmt = ${db}.prepare(${query});
    stmt.bind([${param}]);
    const rows = [];
    while (stmt.step()) {
      const row = stmt.getAsObject();
      const rowArray = Object.values(row).map(value => value?.toString() || "null");
      rows.push(rowArray);
    }
    callback(rows[0]);
  })"""

extern async def getTableLength(db: Database, table: String): Int =
  jsNode """$effekt.capture((callback) => {
    const stmt = ${db}.prepare("SELECT COUNT(*) AS count FROM " + ${table});
    stmt.step();
    const row = stmt.getAsObject();
    callback(row.count);
  })"""






def createFlatmateTable(db: Database): Unit = {
  val query = """
    CREATE TABLE IF NOT EXISTS flatmates (
      id INTEGER PRIMARY KEY,
      name TEXT,
      color TEXT
    )
  """
  db.createTable(query)
}
def createTaskTable(db: Database): Unit = {
  val query = """
    CREATE TABLE IF NOT EXISTS tasks (
      id INTEGER PRIMARY KEY,
      name TEXT,
      description TEXT,
      schedule TEXT,
      last_done TEXT,
      assigned_flatmates TEXT,
      flatmate_next_in_turn TEXT
    )
  """
  db.createTable(query)
}
def createConsumableTable(db: Database): Unit = {
  val query = """
    CREATE TABLE IF NOT EXISTS consumables (
      id INTEGER PRIMARY KEY,
      name TEXT,
      description TEXT,
      urgency TEXT,
      assigned_flatmates TEXT, 
      flatmate_bought_count TEXT
    )
  """
  db.createTable(query)
}


def insertFlatmate(db: Database, name: String): Unit = {
  val maxId = db.getTableLength("flatmates")
  val color = colorPalette(maxId)

  val query = "INSERT INTO flatmates (name, color) VALUES (?, ?)"
  db.insertData(query, [name, color].fromList())
}
def insertTask(db: Database, task: Task): Unit = {
  // List has to contain: name, description, schedule, last_done, assigned_flatmates, flatmates_next_in_turn
  val query = """
    INSERT INTO tasks (name, description, schedule, last_done, assigned_flatmates, flatmate_next_in_turn) VALUES (?, ?, ?, ?, ?, ?)
  """
  db.insertData(query, task.toListOfStrings().fromList())
}
def insertConsumable(db: Database, consumable: Consumable): Unit = {
  // List has to contain: name, description, urgency, assigned_flatmates
  val query = """
    INSERT INTO consumables (name, description, urgency, assigned_flatmates, flatmate_bought_count) VALUES (?, ?, ?, ?)
  """
  db.insertData(query, consumable.toListOfStrings().fromList())
}

// Functions to retrieve whole tables
def getFlatmates(db: Database): List[Flatmate] = {
  val query = "SELECT name, color FROM flatmates"
  val arr = db.readData(query)

  var flatmates = empty[Flatmate]()
  arr.foreach { row =>
    val flatmate = toFlatmate(row.toList())
    flatmates = flatmates.append([flatmate])
    ()
  }
  flatmates
}
def getTasks(db: Database): List[Task] = {
  val query = "SELECT name, description, schedule, last_done, assigned_flatmates, flatmate_next_in_turn FROM tasks"
  val arr = db.readData(query)

  var tasks = empty[Task]()
  arr.foreach { row =>
    val task = toTask(row.toList())
    tasks = tasks.append([task])
    ()
  }
  tasks
}
def getConsumables(db: Database): List[Consumable] = {
  val query = "SELECT name, description, urgency, assigned_flatmates, flatmate_bought_count FROM consumables"
  val arr = db.readData(query)

  var consumables = empty[Consumable]()
  arr.foreach { row =>
    consumables = consumables.append([toConsumable(row.toList())])
    ()
  }
  consumables
}

def getFlatmateNames(db: Database): List[String] = {
  val query = "SELECT name FROM flatmates"
  val arr = db.readData(query)

  var names = empty[String]()
  arr.foreach { row =>
    val list = row.toList()
    list match {
      case Cons(name, _) => names = names.append([name])
      case _ => ()
    }
    ()
  }
  names
}

// Functions to retrieve single entries
def getFlatmateByName(db: Database, name: String): Flatmate = {
  val query = "SELECT name, color FROM flatmates WHERE name = ?"
  val arr = db.readDataWithParams(query, name)
  // check if the array is empty
  if (arr.size() == 0) {
    Flatmate("Not found", "red")
  } else {
    arr.toList().toFlatmate()
  }
}
def getTaskByName(db: Database, name: String): Task = {
  val query = "SELECT name, description, schedule, last_done, assigned_flatmates, flatmate_next_in_turn FROM tasks WHERE name = ?"
  db.readDataWithParams(query, name).toList().toTask()
}
def getConsumableByName(db: Database, name: String): Consumable = {
  val query = "SELECT name, description, urgency, assigned_flatmates, flatmate_bought_count FROM consumables WHERE name = ?"
  db.readDataWithParams(query, name).toList().toConsumable()
}



def openWGManagerDatabase(databasePath: String): Database = {
  val dbExists = databaseFileExists(databasePath)
  val db = if (dbExists) {
    println("Database file exists, opening...")
    openDatabase(databasePath)
  } else {
    println("Database file does not exist, creating...")
    val initDb = initDatabase()
    initDb.createFlatmateTable()
    initDb.createTaskTable()
    initDb.createConsumableTable()

    saveDatabase(initDb, databasePath)
    initDb
  }
  db
}


def main() = {
  val databasePath = "./data.sqlite"
  val db = openWGManagerDatabase(databasePath)

  val alice = Flatmate("Alice", "red")
  val bob = Flatmate("Bob", "blue")
  val task = Task("Clean the kitchen", "Clean the kitchen", 7, 0, [alice.name, bob.name], bob.name)

  db.insertTask(task)
  
  db.insertFlatmate("Valentin")
  db.insertFlatmate("Ellen")
  db.insertFlatmate("Robert")

  db.saveDatabase(databasePath)
  // println("Database saved")
  
  // val tasks = db.getTasks()
  // tasks.foreach { task =>
  //   printTask(task)
  // }
  
  ()
}