module database

import ref
import array
import io/filesystem
import option

import src/database/data
import src/utils/misc


// --------------------------------------------------------------------------------
// There are three main types of data for this webtool: 
// - a flatmate
//   - name
// - a task
//   - name
//   - description
//   - schedule (how often it should be done)
//   - last time it was done
//   - assigned flatmates in order of turn
// - a common consumable
//   - name
//   - description
//   - how many times each flatmate has bought it
//   - urgency (0 for not urgent, 1 for should be bought/done soon, 2 for needs to be bought immediately)
// --------------------------------------------------------------------------------

// Sqlite FFI definitions
extern type Database

extern async def databaseFileExists(filePath: String): Bool =
  jsNode """$effekt.capture((callback) => {
    const exists = fs.existsSync(${filePath});
    callback(exists);
  })"""

extern async def initDatabase(): Database =
jsNode """$effekt.capture(async (callback) => {
    const sql = require('sql.js');
    const initSqlJs = sql.default;
    const SQL = await initSqlJs();
    const db = new SQL.Database();
    callback(db);
  })"""

extern async def openDatabase(filePath: String): Database =
  jsNode """$effekt.capture(async (callback) => {
    const sql = require('sql.js');
    const initSqlJs = sql.default;
    const SQL = await initSqlJs();
    const fileBuffer = fs.readFileSync(${filePath});
    const db = new SQL.Database(fileBuffer);
    callback(db);
  })"""

extern async def saveDatabase(db: Database, filePath: String): Unit =
  jsNode """$effekt.capture(async (callback) => {
    const binaryData = ${db}.export();
    fs.writeFileSync(${filePath}, Buffer.from(binaryData));
    callback();
  })"""



extern async def createTable(db: Database, query: String): Unit =
  jsNode """$effekt.capture((callback) => {
    ${db}.run(${query});
    callback();
  })"""

extern async def executeQuery(db: Database, query: String, params: Array[String]): Unit =
  jsNode """$effekt.capture(async (callback) => {
    const stmt = ${db}.prepare(${query});
    stmt.run(${params});
    callback();
  })"""

extern async def readData(db: Database, query: String): Array[Array[String]] =
  jsNode """$effekt.capture((callback) => {
    const stmt = ${db}.prepare(${query});
    const rows = [];
    while (stmt.step()) {
      const row = stmt.getAsObject();
      const rowArray = Object.values(row).map(value => value?.toString() || "");
      rows.push(rowArray);
    }
    callback(rows);
  })"""

extern async def readDataWithParams(db: Database, query: String, param: String): Array[String] =
  jsNode """$effekt.capture((callback) => {
    const stmt = ${db}.prepare(${query});
    stmt.bind([${param}]);
    const rows = [];
    while (stmt.step()) {
      const row = stmt.getAsObject();
      const rowArray = Object.values(row).map(value => value?.toString() || "");
      rows.push(rowArray);
    }
    callback(rows[0]);
  })"""

extern async def getTableLength(db: Database, table: String): Int =
  jsNode """$effekt.capture((callback) => {
    const stmt = ${db}.prepare("SELECT COUNT(*) AS count FROM " + ${table});
    stmt.step();
    const row = stmt.getAsObject();
    callback(row.count);
  })"""
extern async def isEntryAvailable(db: Database, query: String, name: String): Bool =
  jsNode """$effekt.capture((callback) => {
    const stmt = ${db}.prepare(${query});
    stmt.bind([${name}]);
    const hasRows = stmt.step();
    stmt.free(); 
    callback(hasRows);
  })"""


def createFlatmateTable(db: Database): Unit = {
  val query = """
    CREATE TABLE IF NOT EXISTS flatmates (
      id INTEGER PRIMARY KEY,
      name TEXT,
      color TEXT
    )
  """
  db.createTable(query)
}
def createTaskTable(db: Database): Unit = {
  val query = """
    CREATE TABLE IF NOT EXISTS tasks (
      id INTEGER PRIMARY KEY,
      name TEXT,
      description TEXT,
      schedule TEXT,
      last_done TEXT,
      assigned_flatmates TEXT
    )
  """
  db.createTable(query)
}
def createConsumableTable(db: Database): Unit = {
  val query = """
    CREATE TABLE IF NOT EXISTS consumables (
      id INTEGER PRIMARY KEY,
      name TEXT,
      description TEXT,
      count TEXT,
      urgency TEXT
    )
  """
  db.createTable(query)
}


interface FlatmateHandler {
  def flatmateInDatabase(name: String): Bool
  def flatmateNotInDatabase(name: String): Bool
}
interface TaskHandler {
  def taskInDatabase(name: String): Bool
  def taskNotInDatabase(name: String): Bool
}
interface ConsumableHandler {
  def consumableInDatabase(name: String): Bool
  def consumableNotInDatabase(name: String): Bool
}

interface DatabaseMessage {
  def clear(): Unit
  def warning(message: String): Unit
}

def isFlatmateInDatabase(db: Database, name: String): Bool / FlatmateHandler = {
  val query = "SELECT * FROM flatmates WHERE name = ?"
  if (db.isEntryAvailable(query, name)) {
    do flatmateInDatabase(name)
  } else {
    do flatmateNotInDatabase(name)
  }
}
def isTaskInDatabase(db: Database, name: String): Bool / TaskHandler = {
  val query = "SELECT * FROM tasks WHERE name = ?"
  if (db.isEntryAvailable(query, name)) {
    do taskInDatabase(name)
  } else {
    do taskNotInDatabase(name)
  }
}
def isConsumableInDatabase(db: Database, name: String): Bool / ConsumableHandler = {
  val query = "SELECT * FROM consumables WHERE name = ?"
  if (db.isEntryAvailable(query, name)) {
    do consumableInDatabase(name)
  } else {
    do consumableNotInDatabase(name)
  }
}

def insertFlatmate(db: Database, name: String): Unit / DatabaseMessage = {
  try {
    isFlatmateInDatabase(db, name)
    ()
  } with FlatmateHandler {
    def flatmateInDatabase(name: String) = {
      do warning("Flatmate " ++ name ++ " already in database. Maybe use a nickname.")
      resume(true)
    }
    def flatmateNotInDatabase(name: String) = {
      val usedColors = db.getFlatmateColors()
      val color = colorPalette(usedColors)

      val query = "INSERT INTO flatmates (name, color) VALUES (?, ?)"
      db.executeQuery(query, [name, color].fromList())

      // assign flatmates to tasks and consumables
      val tasks = db.getTasks()
      tasks.foreach { task =>
        val updatedTask = task.assignFlatmate(name)
        try {
          db.updateTask(task.name, updatedTask)
        } with DatabaseMessage {
          def clear() = ()
          def warning(message: String) = println(message)
        }
      }

      val consumables = db.getConsumables()
      consumables.foreach { consumable =>
        val updatedConsumable = consumable.assignFlatmate(name)
        try {
          db.updateConsumable(consumable.name, updatedConsumable)
        } with DatabaseMessage {
          def clear() = ()
          def warning(message: String) = println(message)
        }
      } 
      do clear()
      resume(false)
    }
  }
}
def insertTask(db: Database, task: Task): Unit / DatabaseMessage = {
  try {
    isTaskInDatabase(db, task.name)
    ()
  } with TaskHandler {
    def taskInDatabase(name: String) = {
      do warning("Task " ++ name ++ " already in database. Maybe use a different name.")
      resume(true)
    }
    def taskNotInDatabase(name: String) = {
      val query = """
        INSERT INTO tasks (name, description, schedule, last_done, assigned_flatmates) VALUES (?, ?, ?, ?, ?)
      """
      db.executeQuery(query, task.toListOfStrings().fromList())
      do clear()
      resume(false)
    }
  }
}
def insertConsumable(db: Database, consumable: Consumable): Unit / DatabaseMessage = {
  try {
    isConsumableInDatabase(db, consumable.name)
    ()
  } with ConsumableHandler {
    def consumableInDatabase(name: String) = {
      do warning("Consumable " ++ name ++ " already in database. Maybe use a different name.")
      resume(true)
    }
    def consumableNotInDatabase(name: String) = {
      val query = """
        INSERT INTO consumables (name, description, count, urgency) VALUES (?, ?, ?, ?)
      """
      db.executeQuery(query, consumable.toListOfStrings().fromList())
      do clear()
      resume(false)
    }
  }
}

def updateFlatmate(db: Database, oldName: String,flatmate: Flatmate): Unit / DatabaseMessage = {
  try {
    isFlatmateInDatabase(db, oldName)
    ()
  } with FlatmateHandler {
    def flatmateInDatabase(name: String) = {
      val query = "UPDATE flatmates SET name = ?, color = ? WHERE name = ?"
      db.executeQuery(query, [flatmate.name, flatmate.color, oldName].fromList())

      val tasks = db.getTasks()
      tasks.foreach { task =>
        var updatedTask = task.renameFlatmate(oldName, flatmate.name)
        try {
          db.updateTask(task.name, updatedTask)
        } with DatabaseMessage {
          def clear() = ()
          def warning(message: String) = ()
        }
      }

      val consumables = db.getConsumables()
      consumables.foreach { consumable =>
        var updatedConsumable = consumable.renameFlatmate(oldName, flatmate.name)
        try {
          db.updateConsumable(consumable.name, updatedConsumable)
        } with DatabaseMessage {
          def clear() = ()
          def warning(message: String) = println(message)
        }
      }
      do clear()
      resume(true)
    }
    def flatmateNotInDatabase(name: String) = {
      do warning("Flatmate " ++ name ++ " not in database.")
      resume(false)
    }
  }
}
def updateTask(db: Database, oldName: String, task: Task): Unit / DatabaseMessage = {
  try {
    isTaskInDatabase(db, oldName)
    ()
  } with TaskHandler {
    def taskInDatabase(name: String) = {
      val query = """
        UPDATE tasks SET name = ?, description = ?, schedule = ?, last_done = ?, assigned_flatmates = ? WHERE name = ?
      """
      db.executeQuery(query, task.toListOfStrings().append([oldName]).fromList())
      do clear()
      resume(true)
    }
    def taskNotInDatabase(name: String) = {
      do warning("Task " ++ name ++ " not in database.")
      resume(false)
    }
  }
}
def updateConsumable(db: Database, oldName: String, consumable: Consumable): Unit / DatabaseMessage = {
  try {
    isConsumableInDatabase(db, oldName)
    ()
  } with ConsumableHandler {
    def consumableInDatabase(name: String) = {
      val query = """
        UPDATE consumables SET name = ?, description = ?, count = ?, urgency = ? WHERE name = ?
      """
      db.executeQuery(query, consumable.toListOfStrings().append([oldName]).fromList())
      do clear()
      resume(true)
    }
    def consumableNotInDatabase(name: String) = {
      do warning("Consumable " ++ name ++ " not in database.")
      resume(false)
    }
  }
}

// Needs no handling if entry is not in database
def deleteFlatmate(db: Database, name: String): Unit = {
  val query = "DELETE FROM flatmates WHERE name = ?"
  db.executeQuery(query, [name].fromList())

  // Delete flatmate from all tasks and consumables
  val tasks = db.getTasks()
  tasks.foreach { task =>
    val updatedTask = task.unassignFlatmate(name)
    try {
      db.updateTask(task.name, updatedTask)
    } with DatabaseMessage {
      def clear() = ()
      def warning(message: String) = println(message)
    }
  }

  val consumables = db.getConsumables()
  consumables.foreach { consumable =>
    val updatedConsumable = consumable.unassignFlatmate(name)
    printConsumable(updatedConsumable)
    try {
      db.updateConsumable(consumable.name, updatedConsumable)
    } with DatabaseMessage {
      def clear() = ()
      def warning(message: String) = println(message)
    }
  }
}
def deleteTask(db: Database, name: String): Unit = {
  val query = "DELETE FROM tasks WHERE name = ?"
  db.executeQuery(query, [name].fromList())
}
def deleteConsumable(db: Database, name: String): Unit = {
  val query = "DELETE FROM consumables WHERE name = ?"
  db.executeQuery(query, [name].fromList())
}

// Functions to retrieve whole tables
def getFlatmates(db: Database): List[Flatmate] = {
  val query = "SELECT name, color FROM flatmates"
  val arr = db.readData(query)

  var flatmates = empty[Flatmate]()
  arr.foreach { row =>
    val flatmate = toFlatmate(row.toList())
    flatmates = flatmates.append([flatmate])
    ()
  }
  flatmates
}
def getTasks(db: Database): List[Task] = {
  val query = "SELECT name, description, schedule, last_done, assigned_flatmates FROM tasks"
  val arr = db.readData(query)

  var tasks = empty[Task]()
  arr.foreach { row =>
    val task = row.toList().toTask()
    tasks = tasks.append([task])
    ()
  }
  tasks
}
def getConsumables(db: Database): List[Consumable] = {
  val query = "SELECT name, description, count, urgency FROM consumables"
  val arr = db.readData(query)

  var consumables = empty[Consumable]()
  arr.foreach { row =>
    consumables = consumables.append([row.toList().toConsumable()])
    ()
  }
  consumables
}

def getFlatmateNames(db: Database): List[String] = {
  val query = "SELECT name FROM flatmates"
  val arr = db.readData(query)

  var names = empty[String]()
  arr.foreach { row =>
    val list = row.toList()
    list match {
      case Cons(name, _) => names = names.append([name])
      case _ => ()
    }
    ()
  }
  names
}
def getFlatmateColors(db: Database): List[String] = {
  val query = "SELECT color FROM flatmates"
  val arr = db.readData(query)

  var colors = empty[String]()
  arr.foreach { row =>
    val list = row.toList()
    list match {
      case Cons(color, _) => colors = colors.append([color])
      case _ => ()
    }
    ()
  }
  colors
}

// Functions to retrieve single entries
def getFlatmateByName(db: Database, name: String): Flatmate = {
  try {
    if(isFlatmateInDatabase(db, name)){
      val query = "SELECT name, color FROM flatmates WHERE name = ?"
      val arr = db.readDataWithParams(query, name)
      arr.toList().toFlatmate()
    } else {
      Flatmate("Not in database", "red")
    }
  } with FlatmateHandler {
    def flatmateInDatabase(name: String) = {
      resume(true)
    }
    def flatmateNotInDatabase(name: String) = {
      println("Flatmate " ++ name ++ " not in database.")
      resume(false)
    }
  }
}
def getTaskByName(db: Database, name: String): Task = {
  try {
    if(isTaskInDatabase(db, name)){
      val query = "SELECT name, description, schedule, last_done, assigned_flatmates FROM tasks WHERE name = ?"
      db.readDataWithParams(query, name).toList().toTask()
    } else {
      Task("Not in database", "No description", 0, 0, [""])
    }
  } with TaskHandler {
    def taskInDatabase(name: String) = {
      resume(true)
    }
    def taskNotInDatabase(name: String) = {
      println("Task " ++ name ++ " not in database.")
      resume(false)
    }
  }
}
def getConsumableByName(db: Database, name: String): Consumable = {
  try {
    if(isConsumableInDatabase(db, name)){
      val query = "SELECT name, description, count, urgency FROM consumables WHERE name = ?"
      db.readDataWithParams(query, name).toList().toConsumable()
    } else {
      Consumable("Not in database", "No description", [("", 0)], 0)
    }
  } with ConsumableHandler {
    def consumableInDatabase(name: String) = {
      resume(true)
    }
    def consumableNotInDatabase(name: String) = {
      println("Consumable " ++ name ++ " not in database.")
      resume(false)
    }
  }
}


def openWGManagerDatabase(databasePath: String): Database = {
  val dbExists = databaseFileExists(databasePath)
  val db = if (dbExists) {
    println("Database file exists, opening...")
    openDatabase(databasePath)
  } else {
    println("Database file does not exist, creating...")
    val initDb = initDatabase()
    initDb.createFlatmateTable()
    initDb.createTaskTable()
    initDb.createConsumableTable()

    saveDatabase(initDb, databasePath)
    initDb
  }
  db
}


def main() = {
  val databasePath = "./data.sqlite"
  val db = openWGManagerDatabase(databasePath)

  // db.deleteFlatmate("Valentin")
  db.saveDatabase(databasePath)

  // println("Database saved")
  
  // val tasks = db.getTasks()
  // tasks.foreach { task =>
  //   printTask(task)
  // }
  
  ()
}