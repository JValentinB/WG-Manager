module data

import ref
import array
import io/filesystem
import option

import src/utils/dom


// --------------------------------------------------------------------------------
// There are three main types of data for this webtool: 
// - a flatmate
//   - name
// - a task
//   - name
//   - description
//   - schedule (how often it should be done)
//   - last time it was done
//   - assigned roommates
//   - roommates next in turn
// - a common consumable
//   - name
//   - description
//   - urgency (0 for not urgent, 1 for should be bought/done soon, 2 for needs to be bought immediately)
//   - assigned roommates
//     - how many times each roommate has bought it
// --------------------------------------------------------------------------------

// Sqlite FFI definitions
extern type Module
extern type Database
extern type Statement

extern async def databaseFileExists(filePath: String): Bool =
  jsNode """$effekt.capture((callback) => {
    const exists = fs.existsSync(${filePath});
    callback(exists);
  })"""

extern async def initDatabase(): Database =
jsNode """$effekt.capture(async (callback) => {
    const sql = require('sql.js');
    const initSqlJs = sql.default;
    const SQL = await initSqlJs();
    const db = new SQL.Database();
    callback(db);
  })"""

extern async def openDatabase(filePath: String): Database =
  jsNode """$effekt.capture(async (callback) => {
    const sql = require('sql.js');
    const initSqlJs = sql.default;
    const SQL = await initSqlJs();
    const fileBuffer = fs.readFileSync(${filePath});
    const db = new SQL.Database(fileBuffer);
    callback(db);
  })"""

extern async def saveDatabase(db: Database, filePath: String): Unit =
  jsNode """$effekt.capture(async (callback) => {
    const binaryData = ${db}.export();
    fs.writeFileSync(${filePath}, Buffer.from(binaryData));
    callback();
  })"""

extern async def createTableIfNotExists(db: Database): Unit =
  jsNode """$effekt.capture((callback) => {
    const query = `
      CREATE TABLE IF NOT EXISTS tasks (
        id INTEGER PRIMARY KEY,
        name TEXT NOT NULL,
        description TEXT
      )
    `;
    ${db}.run(query);
    callback();
  })"""

extern async def insertData(db: Database, query: String, params: Array[String]): Unit =
  jsNode """$effekt.capture(async (callback) => {
    const stmt = ${db}.prepare(${query});
    stmt.run(${params});
    callback();
  })"""

extern async def readData(db: Database, query: String): Array[Array[String]] =
  jsNode """$effekt.capture((callback) => {
    const stmt = ${db}.prepare(${query});
    const rows = [];
    while (stmt.step()) {
      const row = stmt.getAsObject();
      const rowArray = Object.values(row).map(value => value?.toString() || "null");
      rows.push(rowArray);
    }
    callback(rows);
  })"""

def main() = {
  val databasePath = "./data.sqlite"

  val dbExists = databaseFileExists(databasePath)
  val db = if (dbExists) {
    println("Database file exists, opening...")
    openDatabase(databasePath)
  } else {
    println("Database file does not exist, creating...")
    val initDb = initDatabase()
    createTableIfNotExists(initDb)
    insertData(initDb, "INSERT INTO tasks (name, description) VALUES (?, ?)", ["Buy groceries", "Milk, eggs, bread"].fromList())
    saveDatabase(initDb, databasePath)
    initDb
  }

  
  val tasksArray = readData(db, "SELECT * FROM tasks")
  val tasks = tasksArray.toList()

  println("Read tasks:")
  tasks.foreach { task =>
    task.foreach { value => println(value) }
  }
}