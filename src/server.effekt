module server

import ref
import io
import io/filesystem
import io/error

import src/database/database

// Node.js HTTP server FFI definitions
extern type Server
extern type Request
extern type Response

extern io def createServer(handler: (Request, Response) => Unit at {io, global, async}): Server =
  jsNode "require('http').createServer((req, res) => $effekt.runToplevel((ks, k) => ${handler}(req, res, ks, k)))"

extern io def listen(server: Server, port: Int, host: String): Unit =
  jsNode "${server}.listen(${port}, ${host})"

extern pure def getUrl(req: Request): String =
  jsNode "${req}.url"

extern pure def getMethod(req: Request): String =
  jsNode "${req}.method"

extern io def getData(req: Request): String =
  jsNode """console.log(${req});
    ${req}.body
  """

extern async def getBody(req: Request): String =
  jsNode """$effekt.capture(callback => {
    let body = '';
    ${req}.on('data', chunk => {
      body += chunk.toString();
    });
    ${req}.on('end', () => {
      callback(body);
    });
  })"""

extern def getJsonValue(json: String, key: String): String =
  jsNode """JSON.parse(${json})[${key}]"""

extern io def writeHead(res: Response, status: Int, contentType: String): Unit =
  jsNode "${res}.writeHead(${status}, { 'Content-Type': ${contentType}, 'Access-Control-Allow-Origin': '*' })"

extern io def end(res: Response, content: String): Unit =
  jsNode "${res}.end(${content})"

extern io def endForDatabaseRequest(res: Response, content: Database): Unit =
  jsNode "${res}.end(Buffer.from(${content}.export()));"



// Handling network requests
def handleRequest(counter: Ref[Int], db: Database, dbPath: String, req: Request, res: Response): Unit = {
  val url = req.getUrl.substring(1).split("/")
  val method = req.getMethod()
  val body = req.getBody()
  
  val path = url match {
    case Cons(path, _) => path
    case _ => ""
  }
  // val arg = url match {
  //   case Cons(_, Cons(arg, _)) => arg
  //   case _ => ""
  // }
  // println(method ++ " " ++ path ++ " " ++ show(arg))
  println(method ++ " " ++ path)

  (method, path) match {
    case ("GET", "") => {
      with on[IOError].panic;
      val htmlContent = readFile("./out/client.html")
      writeHead(res, 200, "text/html")
      end(res, htmlContent)
    }
    case ("GET", "count") => {
      writeHead(res, 200, "application/json")
      end(res, """{"count":""" ++ show(counter.get()) ++ "}")
    }
    case ("GET", "database") => {
      with on[IOError].panic;
      // val content = readFile("./data.sqlite")
      val content = openDatabase("./data.sqlite")
      writeHead(res, 200, "application/octet-stream")
      endForDatabaseRequest(res, content)
    }
    case ("GET", file) => {
      with on[IOError].panic;
      val content = readFile("./out/" ++ file)

      if (file.endsWith(".html")) {
        writeHead(res, 200, "text/html")
      } else if (file.endsWith(".js")) {
        writeHead(res, 200, "application/javascript")
      } else if (file.endsWith(".css")) {
        writeHead(res, 200, "text/css")
      } else if (file.endsWith(".ico")) {
        writeHead(res, 200, "image/x-icon")
      } else {
        writeHead(res, 200, "text/plain")
      }
      end(res, content)
    }
    // case ("POST", "change") => {
    //   val n = arg.unsafeToInt()
    //   counter.set(counter.get() + n)
    //   writeHead(res, 200, "application/json")
    //   end(res, """{"count":""" ++ show(counter.get()) ++ "}")
    // }
    // case ("POST", "reset") => {
    //   counter.set(0)
    //   writeHead(res, 200, "application/json")
    //   end(res, """{"count":""" ++ show(counter.get()) ++ "}")
    // }
    case ("POST", "addFlatmate") => {
      val name = body.getJsonValue("name")
      if (name != "") {
        db.insertFlatmate(name)
        db.saveDatabase(dbPath)
        writeHead(res, 200, "application/json")
        end(res, """{"success":true}""")
      } else {
        writeHead(res, 400, "application/json")
        end(res, """{"error":"Name is required"}""")
      }
    }
    case _ => {
      writeHead(res, 404, "text/plain")
      end(res, "Not Found")
    }
  }
}

def main() = {
  val databasePath = "./data.sqlite"
  val db = openWGManagerDatabase(databasePath)
  val counter = ref(0)


  val server = createServer(box { (req, res) => handleRequest(counter, db, databasePath, req, res) })
  listen(server, 3000, "0.0.0.0")
  println("Server running at http://localhost:3000")
}