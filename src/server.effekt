module server

import ref
import io
import io/filesystem
import io/error

import src/database/database
import src/database/data
import src/utils/misc

// Node.js HTTP server FFI definitions
extern type Server
extern type Request
extern type Response

extern io def createServer(handler: (Request, Response) => Unit at {io, global, async}): Server =
  jsNode "require('http').createServer((req, res) => $effekt.runToplevel((ks, k) => ${handler}(req, res, ks, k)))"

extern io def listen(server: Server, port: Int, host: String): Unit =
  jsNode "${server}.listen(${port}, ${host})"

extern pure def getUrl(req: Request): String =
  jsNode "${req}.url"

extern pure def getMethod(req: Request): String =
  jsNode "${req}.method"

extern pure def getData(req: Request): String =
  jsNode """console.log(${req});
    ${req}.body
  """

extern async def getBody(req: Request): String =
  jsNode """$effekt.capture(callback => {
    let body = '';
    ${req}.on('data', chunk => {
      body += chunk.toString();
    });
    ${req}.on('end', () => {
      callback(body);
    });
  })"""

extern def getJsonValue(json: String, key: String): String =
  jsNode """JSON.parse(${json})[${key}]"""

extern def getJsonValueAsInt(json: String, key: String): Int =
  jsNode """parseInt(JSON.parse(${json})[${key}])"""


extern io def writeHead(res: Response, status: Int, contentType: String): Unit =
  jsNode "${res}.writeHead(${status}, { 'Content-Type': ${contentType}, 'Access-Control-Allow-Origin': '*' })"

extern io def end(res: Response, content: String): Unit =
  jsNode "${res}.end(${content})"

extern io def endForDatabaseRequest(res: Response, content: Database): Unit =
  jsNode "${res}.end(Buffer.from(${content}.export()));"


def handleDatabaseMessage(db: Database, path: String, res: Response) {f: () => Unit / DatabaseMessage}: Unit = {
  try {
    f()
  } with DatabaseMessage {
    def clear() = {
      db.saveDatabase(path)
      println("Database saved")
      writeHead(res, 200, "application/json")
      end(res, """{"success":true}""")
      resume(())
    }
    def warning(msg: String) = {
      writeHead(res, 400, "application/json")
      end(res, "{\"error\":\"" ++ msg ++ "\"}")
      resume(())
    }
  }
}

// Handling network requests
def handleRequest(counter: Ref[Int], db: Database, dbPath: String, req: Request, res: Response): Unit = {
  val url = req.getUrl.substring(1).split("/")
  val method = req.getMethod()
  val body = req.getBody()
  
  val path = url match {
    case Cons(path, _) => path
    case _ => ""
  }
  println(method ++ " " ++ path)

  (method, path) match {
    case ("GET", "") => {
      with on[IOError].panic;
      val htmlContent = readFile("./out/client.html")
      writeHead(res, 200, "text/html")
      end(res, htmlContent)
    }
    case ("GET", "database") => {
      with on[IOError].panic;
      // val content = readFile("./data.sqlite")
      val content = openDatabase("./data.sqlite")
      writeHead(res, 200, "application/octet-stream")
      endForDatabaseRequest(res, content)
    }
    case ("GET", file) => {
      with on[IOError].panic;
      val content = readFile("./out/" ++ file)

      if (file.endsWith(".html")) {
        writeHead(res, 200, "text/html")
      } else if (file.endsWith(".js")) {
        writeHead(res, 200, "application/javascript")
      } else if (file.endsWith(".css")) {
        writeHead(res, 200, "text/css")
      } else if (file.endsWith(".ico")) {
        writeHead(res, 200, "image/x-icon")
      } else {
        writeHead(res, 200, "text/plain")
      }
      end(res, content)
    }

    case ("POST", "addTask") => {
      val name = body.getJsonValue("name")
      val description = body.getJsonValue("description")
      val schedule = body.getJsonValueAsInt("schedule")
      val lastDone = body.getJsonValueAsInt("lastDone")

      if (name == "" || description == "" || schedule == 0) {
        writeHead(res, 400, "application/json")
        end(res, """{"error":"Name, description and schedule are required"}""")
      } else {
        val names = db.getFlatmateNames()
        val task = Task(name, description, schedule, lastDone, names)  

        handleDatabaseMessage(db, dbPath, res) {
          db.insertTask(task)
        }
      }
    }
    case ("POST", "addConsumable") => {
      val name = body.getJsonValue("name")
      val description = body.getJsonValue("description")

      if (name == "" || description == "") {
        writeHead(res, 400, "application/json")
        end(res, """{"error":"Name and description are required"}""")
      } else {
        val currentTimestamp = getCurrentTime()
        val names = db.getFlatmateNames()
        val emptyCount = names.emptyCountList()
        val consumable = Consumable(name, description, emptyCount, 0)

        handleDatabaseMessage(db, dbPath, res) {
          db.insertConsumable(consumable)  
        }
      }
    }
    case ("POST", "addFlatmate") => {
      val name = body.getJsonValue("name")
      if (name == "") {
        writeHead(res, 400, "application/json")
        end(res, """{"error":"Name is required"}""")
        ()
      } else {
        handleDatabaseMessage(db, dbPath, res) {
          db.insertFlatmate(name)
        }
      }
    }

    case ("POST", "updateTask") => {
      val name = body.getJsonValue("name")
      val description = body.getJsonValue("description")
      val schedule = body.getJsonValueAsInt("schedule")
      val lastDone = body.getJsonValueAsInt("lastDone")

      if (name == "" || description == "" || schedule <= 0) {
        writeHead(res, 400, "application/json")
        end(res, """{"error":"Name, description are required. Schedule must be greater than 0"}""")
      } else {
        handleDatabaseMessage(db, dbPath, res) {
          val task = db.getTaskByName(name)
          val updatedTask = Task(name, description, schedule, lastDone, task.assignedFlatmates)
          db.updateTask(updatedTask)
        }
      }
      ()
    }
    case ("POST", "updateConsumable") => {
      val name = body.getJsonValue("name")
      val description = body.getJsonValue("description")
      val urgency = body.getJsonValueAsInt("urgency")

      if (name == "" || description == "") {
        writeHead(res, 400, "application/json")
        end(res, """{"error":"Name and description are required"}""")
      } else {
        handleDatabaseMessage(db, dbPath, res) {
          val consumable = db.getConsumableByName(name)
          val updatedConsumable = Consumable(name, description, consumable.count, urgency)
          db.updateConsumable(updatedConsumable)
        }
      }
      ()
    }
    case ("POST", "updateFlatmate") => {
      val name = body.getJsonValue("name")
      val color = body.getJsonValue("color")

      if (name == "") {
        writeHead(res, 400, "application/json")
        end(res, """{"error":"Name is required"}""")
      } else {
        handleDatabaseMessage(db, dbPath, res) {
          val updatedFlatmate = Flatmate(name, color)
          db.updateFlatmate(updatedFlatmate)
        }
      }
    }

    case ("POST", "renameTask") => {
      val oldName = body.getJsonValue("oldName")
      val newName = body.getJsonValue("newName")
      val description = body.getJsonValue("description")
      val schedule = body.getJsonValueAsInt("schedule")
      val lastDone = body.getJsonValueAsInt("lastDone")

      if (oldName == "" || newName == "" || description == "" || schedule <= 0) {
        writeHead(res, 400, "application/json")
        end(res, """{"error":"Name, description and schedule are required"}""")
      } else {
        handleDatabaseMessage(db, dbPath, res) {
          val task = db.getTaskByName(oldName)
          val renamedTask = Task(newName, description, schedule, lastDone, task.assignedFlatmates)
          db.renameTask(oldName, renamedTask)
        }
      }
      ()
    }
    case ("POST", "renameConsumable") => {
      val oldName = body.getJsonValue("oldName")
      val newName = body.getJsonValue("newName")
      val description = body.getJsonValue("description")
      val urgency = body.getJsonValueAsInt("urgency")

      if (oldName == "" || newName == "" || description == "") {
        writeHead(res, 400, "application/json")
        end(res, """{"error":"Name and description are required"}""")
      } else {
        handleDatabaseMessage(db, dbPath, res) {
          val consumable = db.getConsumableByName(oldName)
          val renamedConsumable = Consumable(newName, description, consumable.count, urgency)
          db.renameConsumable(oldName, renamedConsumable)
        }
      }
      ()
    }
    case ("POST", "renameFlatmate") => {
      val oldName = body.getJsonValue("oldName")
      val newName = body.getJsonValue("newName")
      val color = body.getJsonValue("color")

      if (oldName == "" || newName == "") {
        writeHead(res, 400, "application/json")
        end(res, """{"error":"Name is required"}""")
      } else {
        handleDatabaseMessage(db, dbPath, res) {
          val renamedFlatmate = Flatmate(newName, color)
          db.renameFlatmate(oldName, renamedFlatmate)
        }
      }
    }

    case ("POST", "deleteTask") => {
      val name = body.getJsonValue("name")
      if (name != "") {
        db.deleteTask(name)
        db.saveDatabase(dbPath)
        writeHead(res, 200, "application/json")
        end(res, """{"success":true}""")
      } else {
        writeHead(res, 400, "application/json")
        end(res, """{"error":"Name is required"}""")
      }
      ()
    }
    case ("POST", "deleteConsumable") => {
      val name = body.getJsonValue("name")
      if (name != "") {
        db.deleteConsumable(name)
        db.saveDatabase(dbPath)
        writeHead(res, 200, "application/json")
        end(res, """{"success":true}""")
      } else {
        writeHead(res, 400, "application/json")
        end(res, """{"error":"Name is required"}""")
      }
      ()
    }
    case ("POST", "deleteFlatmate") => {
      val name = body.getJsonValue("name")
      if (name != "") {
        db.deleteFlatmate(name)
        db.saveDatabase(dbPath)
        writeHead(res, 200, "application/json")
        end(res, """{"success":true}""")
      } else {
        writeHead(res, 400, "application/json")
        end(res, """{"error":"Name is required"}""")
      }
    }

    case ("POST", "taskDone") => {
      val taskName = body.getJsonValue("taskName")
      val flatmateName = body.getJsonValue("flatmateName")
      if (taskName == "" || flatmateName == "") {
        writeHead(res, 400, "application/json")
        end(res, """{"error":"Task name and flatmate name are required"}""")
      } else {
        handleDatabaseMessage(db, dbPath, res) {
          val task = db.getTaskByName(taskName)
          val updatedTask = task.taskDone(flatmateName)
          db.updateTask(updatedTask)
          ()
        }
      }
    }
    case ("POST", "taskAssign") => {
      val taskName = body.getJsonValue("taskName")
      val flatmateName = body.getJsonValue("flatmateName")
      if (taskName == "" || flatmateName == "") {
        writeHead(res, 400, "application/json")
        end(res, """{"error":"Task name and flatmate name are required"}""")
      } else {
        handleDatabaseMessage(db, dbPath, res) {
          val task = db.getTaskByName(taskName)
          val updatedTask = task.assignFlatmate(flatmateName)
          db.updateTask(updatedTask)
          ()
        }
      }
    }
    case ("POST", "taskUnassign") => {
      val taskName = body.getJsonValue("taskName")
      val flatmateName = body.getJsonValue("flatmateName")
      if (taskName == "" || flatmateName == "") {
        writeHead(res, 400, "application/json")
        end(res, """{"error":"Task name and flatmate name are required"}""")
      } else {
        handleDatabaseMessage(db, dbPath, res) {
          val task = db.getTaskByName(taskName)
          val updatedTask = task.unassignFlatmate(flatmateName)
          db.updateTask(updatedTask)
          ()
        }
      }
    }

    case ("POST", "consumableCountUp") => {
      val consumableName = body.getJsonValue("consumableName")
      val flatmateName = body.getJsonValue("flatmateName")

      if (consumableName == "" || flatmateName == "") {
        writeHead(res, 400, "application/json")
        end(res, """{"error":"Consumable name and flatmate name are required"}""")
      } else {
        handleDatabaseMessage(db, dbPath, res) {
          val consumable = db.getConsumableByName(consumableName)
          val updatedConsumable = consumable.countUp(flatmateName)
          db.updateConsumable(updatedConsumable)
          ()
        }
      }
    }
    case ("POST", "consumableAssign") => {
      val consumableName = body.getJsonValue("consumableName")
      val flatmateName = body.getJsonValue("flatmateName")

      if (consumableName == "" || flatmateName == "") {
        writeHead(res, 400, "application/json")
        end(res, """{"error":"Consumable name and flatmate name are required"}""")
      } else {
        handleDatabaseMessage(db, dbPath, res) {
          val consumable = db.getConsumableByName(consumableName)
          val updatedConsumable = consumable.assignFlatmate(flatmateName)
          db.updateConsumable(updatedConsumable)
          ()
        }
      }
    }
    case ("POST", "consumableUnassign") => {
      val consumableName = body.getJsonValue("consumableName")
      val flatmateName = body.getJsonValue("flatmateName")

      if (consumableName == "" || flatmateName == "") {
        writeHead(res, 400, "application/json")
        end(res, """{"error":"Consumable name and flatmate name are required"}""")      
      } else {
        handleDatabaseMessage(db, dbPath, res) {
          val consumable = db.getConsumableByName(consumableName)
          val updatedConsumable = consumable.unassignFlatmate(flatmateName)
          db.updateConsumable(updatedConsumable)
          ()
        }
      }
    }
    case _ => {
      writeHead(res, 404, "text/plain")
      end(res, "Not Found")
    }
  }
}

def main() = {
  val databasePath = "./data.sqlite"
  val db = openWGManagerDatabase(databasePath)
  val counter = ref(0)


  val server = createServer(box { (req, res) => handleRequest(counter, db, databasePath, req, res) })
  listen(server, 3000, "0.0.0.0")
  println("Server running at http://localhost:3000")
}